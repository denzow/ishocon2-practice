 file_name  line  min_time   max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  ---------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    64         0          0             0      0           0              def db():
./myapp.py    65      25.0      116.0        28.273   5658      159969                  if hasattr(request, 'db'):
./myapp.py    66         0          0             0      0           0                      return request.db
./myapp.py    67         0          0             0      0           0                  else:
./myapp.py    68      21.0       98.0         23.71   5658      134150                      request.db = DB_POOL.pop()
./myapp.py    69      20.0      107.0        22.089   5658      124977                      return request.db
./myapp.py    72         0          0             0      0           0              @app.teardown_request
./myapp.py    73         0          0             0      0           0              def teardown(exception=None):
./myapp.py    74      25.0       74.0        26.798   6017      161241                  if hasattr(request, 'db'):
./myapp.py    75      21.0      136.0        22.487   5658      127232                      DB_POOL.append(request.db)
./myapp.py    76      20.0      790.0        21.807   5658      123386                      delattr(request, 'db')
./myapp.py    79         0          0             0      0           0              def get_election_results():
./myapp.py    80         0          0             0      0           0              #     cur = db().cursor()
./myapp.py    81         0          0             0      0           0              #     cur.execute("""
./myapp.py    82         0          0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    83         0          0             0      0           0              # FROM candidates AS c
./myapp.py    84         0          0             0      0           0              # LEFT OUTER JOIN
./myapp.py    85         0          0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    86         0          0             0      0           0              #   FROM votes
./myapp.py    87         0          0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    88         0          0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    89         0          0             0      0           0              # ORDER BY v.count DESC
./myapp.py    90         0          0             0      0           0              # """)
./myapp.py    91         0        2.0         0.665    239         159                  result = []
./myapp.py    92     0.968     17.258         1.189   7409        8809                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    93    22.167    117.267        26.256   7170      188258                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    94       1.3      2.433         1.582   7170       11343                      result.append(data)
./myapp.py    95         0          0             0      0           0
./myapp.py    96       0.4      482.0         3.107   7409       23022                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py    97         0       20.0         0.762    239         182                  return result
./myapp.py   100         0          0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   101         0          0             0      0           0              #     cur = db().cursor()
./myapp.py   102         0          0             0      0           0              #     cur.execute("""
./myapp.py   103         0          0             0      0           0              # SELECT keyword
./myapp.py   104         0          0             0      0           0              # FROM votes
./myapp.py   105         0          0             0      0           0              # WHERE candidate_id = %s
./myapp.py   106         0          0             0      0           0              # GROUP BY keyword
./myapp.py   107         0          0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   108         0          0             0      0           0              # LIMIT 10
./myapp.py   109         0          0             0      0           0              # """, (candidate_id,))
./myapp.py   110         0          0             0      0           0              #     records = cur.fetchall()
./myapp.py   111         0          0             0      0           0
./myapp.py   112         0          0             0      0           0                  """
./myapp.py   113         0          0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   114         0          0             0      0           0                  """
./myapp.py   115     393.0    27621.0     17219.092    120     2066291  **              keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   116         0     5381.0        43.538   1330       57905                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   117         0          0             0      0           0                  # print(result)
./myapp.py   118         0          0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   119         0        1.0         0.517    120          62                  return result
./myapp.py   120         0          0             0      0           0
./myapp.py   121         0          0             0      0           0
./myapp.py   122         0          0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   123     0.571       52.0         3.608    564        2035              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   124         0          0             0      0           0
./myapp.py   125         0          0             0      0           0                cur = db().cursor()
./myapp.py   126         0          0             0      0           0                cur.execute("""
./myapp.py   127         0          0             0      0           0              LECT keyword
./myapp.py   128         0          0             0      0           0              OM votes
./myapp.py   129         0          0             0      0           0              ERE candidate_id IN ({})
./myapp.py   130         0          0             0      0           0              OUP BY keyword
./myapp.py   131         0          0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   132         0          0             0      0           0              MIT 10
./myapp.py   133         0          0             0      0           0              ".format(candidate_ids_str))
./myapp.py   134         0          0             0      0           0                records = cur.fetchall()
./myapp.py   135         0          0             0      0           0
./myapp.py   136      29.0       93.0        45.262     61        2761              total_keywords = Counter()
./myapp.py   137     0.571        1.6         1.034    503         520              for candidate_id in candidate_ids:
./myapp.py   138  1024.833  22998.167     16832.025    442     7439755  ******          total_keywords += Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   139         0          0             0      0           0
./myapp.py   140       1.0     1751.0         38.48    731       28129              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   141         0          0             0      0           0
./myapp.py   142         0          0             0      0           0
./myapp.py   143         0          0             0      0           0              def get_all_party_name():
./myapp.py   144       2.0       17.0         3.292    178         586                  return list(constants.PARTY_MASTER.keys())
./myapp.py   147         0          0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   148     0.333      4.833         1.247    562         701                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   151         0          0             0      0           0              def db_initialize():
./myapp.py   152     125.0      125.0         125.0      1         125                  cur = db().cursor()
./myapp.py   153   10830.0    10830.0       10830.0      1       10830                  cur.execute('DELETE FROM votes')
./myapp.py   156         0          0             0      0           0              @app.route('/')
./myapp.py   157         0          0             0      0           0              def get_index():
./myapp.py   158       1.0        4.0         1.838    179         329                  candidates = []
./myapp.py   159     964.0     2797.0      1100.603    179      197008                  election_results = get_election_results()
./myapp.py   160         0          0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   161       2.0       19.0         2.514    179         450                  candidates += election_results[:10]
./myapp.py   162         0       15.0         1.402    179         251                  candidates.append(election_results[-1])
./myapp.py   163         0          0             0      0           0
./myapp.py   164       5.0       29.0         7.369    179        1319                  parties_name = get_all_party_name()
./myapp.py   165         0       17.0         1.251    179         224                  parties = {}
./myapp.py   166       0.4        3.8         1.009    895         903                  for name in parties_name:
./myapp.py   167       0.5        6.0         0.961    716         688                      parties[name] = 0
./myapp.py   168     0.548      2.677         0.947   5549        5257                  for r in election_results:
./myapp.py   169     0.733      2.967          1.27   5370        6818                      parties[r['political_party']] += r['count'] or 0
./myapp.py   170      0.25       49.0         4.374    891        3897                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   171         0          0             0      0           0
./myapp.py   172       1.0       11.0         1.425    179         255                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   173     0.387      1.645         0.908   5549        5039                  for r in election_results:
./myapp.py   174       0.6        2.1         1.001   5370        5375                      if r['sex'] == '男':
./myapp.py   175     0.583      3.417         1.138   2148        2445                          sex_ratio['men'] += r['count'] or 0
./myapp.py   176     0.389        2.5         0.958   3222        3088                      elif r['sex'] == '女':
./myapp.py   177     0.556      2.389         1.137   3222        3662                          sex_ratio['women'] += r['count'] or 0
./myapp.py   178      17.0       55.0        24.051    178        4281                  cached_html = get_index_page_cache()
./myapp.py   179       1.0       11.0         1.433    178         255                  if cached_html:
./myapp.py   180         0          0             0      0           0                      return cached_html
./myapp.py   181         0          0             0      0           0
./myapp.py   182         0        2.0         1.236    178         220                  html = render_template('index.html',
./myapp.py   183         0        8.0         0.876    178         156                                         candidates=candidates,
./myapp.py   184         0       10.0         0.882    178         157                                         parties=parties,
./myapp.py   185    2302.0   534044.0      6344.213    178     1129270  *                                      sex_ratio=sex_ratio)
./myapp.py   186         0          0             0      0           0
./myapp.py   187      36.0      779.0        62.837    178       11185                  set_index_page_cache(html)
./myapp.py   188       1.0        2.0         1.337    178         238                  return html
./myapp.py   190         0          0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   191         0          0             0      0           0              def get_candidate(candidate_id):
./myapp.py   192       4.0       22.0         6.167    120         740                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   193         0        1.0           0.7    120          84                  if not candidate:
./myapp.py   194         0          0             0      0           0                      return redirect('/')
./myapp.py   195         0          0             0      0           0                  # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   196      35.0       78.0          39.1    120        4692                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   197     437.0    27962.0     17605.325    120     2112639  **              keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   198         0        1.0         0.825    120          99                  return render_template('candidate.html',
./myapp.py   199         0        2.0         0.642    120          77                                         candidate=candidate,
./myapp.py   200         0        1.0          0.55    120          66                                         votes=votes,
./myapp.py   201     446.0    25980.0       820.383    120       98446                                         keywords=keywords)
./myapp.py   204         0          0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   205         0          0             0      0           0              def get_political_party(name):
./myapp.py   206       1.0        3.0         1.541     61          94                  votes = 0
./myapp.py   207    31.677    124.323        37.888   1891       71647                  for r in get_election_results():
./myapp.py   208       0.6      1.767         0.848   1830        1551                      if r['political_party'] == name:
./myapp.py   209     0.333      2.333          0.95    442         420                          votes += r['count'] or 0
./myapp.py   210         0          0             0      0           0
./myapp.py   211         0          0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   212         0          0             0      0           0
./myapp.py   213       1.0       22.0         2.525     61         154                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   214     2.111       78.0         7.518    564        4240                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   215    7065.0   194095.0    122475.918     61     7471031  ******          keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   216         0        1.0         0.869     61          53                  return render_template('political_party.html',
./myapp.py   217         0        1.0         0.656     61          40                                         political_party=name,
./myapp.py   218         0        1.0         0.689     61          42                                         votes=votes,
./myapp.py   219         0        1.0         0.623     61          38                                         candidates=candidates,
./myapp.py   220     704.0    28641.0       1249.82     61       76239                                         keywords=keywords)
./myapp.py   221         0          0             0      0           0
./myapp.py   222         0          0             0      0           0
./myapp.py   223         0          0             0      0           0              .route('/vote')
./myapp.py   224         0          0             0      0           0              get_vote():
./myapp.py   225         0          0             0      0           0              return constants.VOTE_HTML
./myapp.py   228         0          0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   229         0          0             0      0           0              def post_vote():
./myapp.py   230     101.0     1126.0       115.808   5657      655125  *               cur = db().cursor()
./myapp.py   231      99.0     2484.0       124.466   5657      704106  *               raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   232         0          0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   233       1.0      234.0         3.662  45256      165745                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   234       1.0       19.0         1.375   5657        7777                  data = (form_base['mynumber'], form_base['name'], form_base['address'])
./myapp.py   235     460.0     9625.0      2068.235   5657    11700006  !*********      cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', data)
./myapp.py   236       9.0       78.0        13.451   5657       76095                  user = cur.fetchone()
./myapp.py   237       4.0       37.0          5.38   5657       30434                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   238         0       20.0         0.782   5657        4424                  voted_count = 0
./myapp.py   239         0       22.0           0.8   5657        4528                  if user:
./myapp.py   240      20.0      111.0        33.943   4554      154577                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   241         0          0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   242         0          0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   243         0          0             0      0           0                      # if not voted_count:
./myapp.py   244         0          0             0      0           0                      #     voted_count = 0
./myapp.py   245         0       18.0         0.872   5657        4931                  if not user:
./myapp.py   246         0       19.0         1.044   1103        1152                      return constants.VOTE_FAIL1_HTML
./myapp.py   247       2.0       24.0         2.703   4554       12309                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   248       2.0        2.0           2.0      2           4                      return constants.VOTE_FAIL2_HTML
./myapp.py   249         0       21.0         0.911   4552        4147                  elif not form_base['candidate']:
./myapp.py   250       1.0        1.0           1.0      1           1                      return constants.VOTE_FAIL3_HTML
./myapp.py   251         0       16.0         0.755   4551        3435                  elif not candidate_id:
./myapp.py   252       1.0        1.0           1.0      1           1                      return constants.VOTE_FAIL4_HTML
./myapp.py   253         0       18.0         0.874   4550        3977                  elif not form_base['keyword']:
./myapp.py   254       1.0        1.0           1.0      1           1                      return constants.VOTE_FAIL5_HTML
./myapp.py   255         0          0             0      0           0
./myapp.py   256       1.0       18.0         1.111   4549        5054                  vote_count = int(form_base['vote_count'])
./myapp.py   257         0          0             0      0           0                  #data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   258         0          0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   259      29.0     3794.0        86.566   4549      393790                  set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   260     298.0     4721.0       853.041   4549     3880485  ***             set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   261      28.0     2889.0       258.324   4549     1175117  *               set_voted_count_cache(user['id'], vote_count)
./myapp.py   262         0          0             0      0           0
./myapp.py   263       8.0     4363.0       454.662   4549     2068256  **              clear_index_page_cache()
./myapp.py   264       1.0       21.0         1.878   4549        8545                  return constants.VOTE_SUCCESS_HTML
./myapp.py   265         0          0             0      0           0
./myapp.py   266         0          0             0      0           0
./myapp.py   267         0          0             0      0           0              @app.route('/initialize')
./myapp.py   268         0          0             0      0           0              def get_initialize():
./myapp.py   269   10962.0    10962.0       10962.0      1       10962                  db_initialize()
./myapp.py   270   16561.0    16561.0       16561.0      1       16561                  r.flushdb()
./myapp.py   271       1.0        1.0           1.0      1           1                  return ''
./myapp.py   274         0          0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   275       1.0       30.0         1.873   5657       10595                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   278         0          0             0      0           0              def set_cache(key, val):
./myapp.py   279       1.0    653.333          8.28  13825      114468                  if not uwsgi.cache_exists(key):
./myapp.py   280       4.0     2840.0       206.891   4577      946939  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   281         0          0             0      0           0                  else:
./myapp.py   282       2.0     2178.5       232.309   9248     2148395  **                  uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   285         0          0             0      0           0              def get_cache(key, default=None):
./myapp.py   286         0      7.667         0.598  21120       12632                  try:
./myapp.py   287       5.0   1247.333        12.744  21120      269146                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   288         0      252.0         1.069   9615       10278                  except:
./myapp.py   289     0.333       11.0         1.234   9615       11868                      return default
./myapp.py   292         0          0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   293       2.0       30.0         2.672   4549       12153                  key_name = 'voted_{}'.format(user_id)
./myapp.py   294      21.0     2881.0       247.939   4549     1127875  *               set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   297         0          0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   298       2.0       26.0         2.593   4554       11807                  key_name = 'voted_{}'.format(user_id)
./myapp.py   299      14.0      104.0        26.482   4554      120601                  return get_cache(key_name, 0)
./myapp.py   302         0          0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   303         0       20.0          0.86   4549        3913                  key_name = md5('cv_{}'.format(
./myapp.py   304       1.0       31.0         1.834   4549        8345                      candidate_id,
./myapp.py   305       4.0       32.0         5.399   4549       24558                  ).encode('utf-8')).hexdigest()
./myapp.py   306      16.0     3757.0        70.877   4549      322419                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   309         0          0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   310         0       11.0         0.677   7290        4932                  key_name = md5('cv_{}'.format(
./myapp.py   311       1.1       13.0         1.465   7290       10681                      candidate_id,
./myapp.py   312     2.133       24.0         2.615   7290       19064                  ).encode('utf-8')).hexdigest()
./myapp.py   313    11.033    106.167        15.016   7290      109464                  return get_cache(key_name, 0)
./myapp.py   316         0          0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   317         0       70.0         0.893   4549        4064                  key_name = 'ckv_{}_{}'.format(
./myapp.py   318       1.0       34.0         2.255   4549       10259                      candidate_id, keyword
./myapp.py   319         0          0             0      0           0                  )
./myapp.py   320     290.0     4711.0       840.481   4549     3823348  ***             r.incr(key_name, vote_count)
./myapp.py   323         0          0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   324       1.0       19.0         3.139    562        1764                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   325         0        2.0         0.886    562         498                  result = {}
./myapp.py   326     14.56     1613.0        48.715  11258      548432                  for key in r.keys(key_name):
./myapp.py   327     3.077       5.25         3.527  10696       37725                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   328    217.75    1211.81       822.101  10696     8793197  ********            result[keyword] = int(r.get(key))
./myapp.py   329         0          0             0      0           0
./myapp.py   330         0        1.0           0.6    562         337                  return result
./myapp.py   332         0          0             0      0           0              def set_index_page_cache(html):
./myapp.py   333      32.0      774.0        57.124    178       10168                  set_cache('index', html)
./myapp.py   336         0          0             0      0           0              def get_index_page_cache():
./myapp.py   337      13.0       50.0        18.646    178        3319                  return get_cache('index', None)
./myapp.py   339         0          0             0      0           0              def clear_index_page_cache():
./myapp.py   340       6.0     4358.0       449.039   4549     2042679  **              set_cache('index', None)
./myapp.py   375         0          0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   376         0          0             0      0           0              def unquote_cached(keyword):
./myapp.py   377     257.0     1464.0       640.565     23       14733                  return unquote_plus(keyword)
