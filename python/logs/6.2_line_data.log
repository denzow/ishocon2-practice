 file_name  line  min_time  max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  --------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    64         0         0             0      0           0              def db():
./myapp.py    65      24.0     176.0        26.805   5322      142654                  if hasattr(request, 'db'):
./myapp.py    66         0         0             0      0           0                      return request.db
./myapp.py    67         0         0             0      0           0                  else:
./myapp.py    68      21.0     179.0        23.584   5322      125515                      request.db = DB_POOL.pop()
./myapp.py    69      20.0     177.0        21.846   5322      116262                      return request.db
./myapp.py    72         0         0             0      0           0              @app.teardown_request
./myapp.py    73         0         0             0      0           0              def teardown(exception=None):
./myapp.py    74      24.0     161.0        26.385   5323      140448                  if hasattr(request, 'db'):
./myapp.py    75      21.0     102.0        22.422   5321      119310                      DB_POOL.append(request.db)
./myapp.py    76      20.0     821.0        22.584   5321      120168                      delattr(request, 'db')
./myapp.py    79         0         0             0      0           0              def get_election_results():
./myapp.py    80         0         0             0      0           0              #     cur = db().cursor()
./myapp.py    81         0         0             0      0           0              #     cur.execute("""
./myapp.py    82         0         0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    83         0         0             0      0           0              # FROM candidates AS c
./myapp.py    84         0         0             0      0           0              # LEFT OUTER JOIN
./myapp.py    85         0         0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    86         0         0             0      0           0              #   FROM votes
./myapp.py    87         0         0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    88         0         0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    89         0         0             0      0           0              # ORDER BY v.count DESC
./myapp.py    90         0         0             0      0           0              # """)
./myapp.py    91       1.0       1.0           1.0      2           2                  result = []
./myapp.py    92     0.935     1.032         0.984     62          61                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    93    23.033    23.333        23.183     60        1391                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    94       1.3     1.433         1.367     60          82                      result.append(data)
./myapp.py    95         0         0             0      0           0
./myapp.py    96       0.6      61.0         2.548     62         158                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py    97         0       1.0           0.5      2           1                  return result
./myapp.py   100         0         0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   101         0         0             0      0           0              #     cur = db().cursor()
./myapp.py   102         0         0             0      0           0              #     cur.execute("""
./myapp.py   103         0         0             0      0           0              # SELECT keyword
./myapp.py   104         0         0             0      0           0              # FROM votes
./myapp.py   105         0         0             0      0           0              # WHERE candidate_id = %s
./myapp.py   106         0         0             0      0           0              # GROUP BY keyword
./myapp.py   107         0         0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   108         0         0             0      0           0              # LIMIT 10
./myapp.py   109         0         0             0      0           0              # """, (candidate_id,))
./myapp.py   110         0         0             0      0           0              #     records = cur.fetchall()
./myapp.py   111         0         0             0      0           0
./myapp.py   112         0         0             0      0           0                  """
./myapp.py   113         0         0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   114         0         0             0      0           0                  """
./myapp.py   115    2514.0    3064.0        2789.0      2        5578                  keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   116     297.2    5257.0       715.217     23       16450                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   117         0         0             0      0           0                  # print(result)
./myapp.py   118         0         0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   119         0         0             0      2           0                  return result
./myapp.py   120         0         0             0      0           0
./myapp.py   121         0         0             0      0           0
./myapp.py   122         0         0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   123     0.857      13.0         2.375      8          19              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   124         0         0             0      0           0
./myapp.py   125         0         0             0      0           0                cur = db().cursor()
./myapp.py   126         0         0             0      0           0                cur.execute("""
./myapp.py   127         0         0             0      0           0              LECT keyword
./myapp.py   128         0         0             0      0           0              OM votes
./myapp.py   129         0         0             0      0           0              ERE candidate_id IN ({})
./myapp.py   130         0         0             0      0           0              OUP BY keyword
./myapp.py   131         0         0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   132         0         0             0      0           0              MIT 10
./myapp.py   133         0         0             0      0           0              ".format(candidate_ids_str))
./myapp.py   134         0         0             0      0           0                records = cur.fetchall()
./myapp.py   135         0         0             0      0           0
./myapp.py   136      31.0      31.0          31.0      1          31              total_keywords = Counter()
./myapp.py   137       1.0       1.0           1.0      7           7              for candidate_id in candidate_ids:
./myapp.py   138  1282.667  1282.667      1282.667      6        7696                  total_keywords += Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   139         0         0             0      0           0
./myapp.py   140   372.818    4283.0       698.667     12        8384              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   141         0         0             0      0           0
./myapp.py   142         0         0             0      0           0
./myapp.py   143         0         0             0      0           0              def get_all_party_name():
./myapp.py   144       3.0       3.0           3.0      1           3                  return list(constants.PARTY_MASTER.keys())
./myapp.py   147         0         0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   148     0.333       3.0         0.875      8           7                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   151         0         0             0      0           0              def db_initialize():
./myapp.py   152     119.0     119.0         119.0      1         119                  cur = db().cursor()
./myapp.py   153     449.0     449.0         449.0      1         449                  cur.execute('DELETE FROM votes')
./myapp.py   156         0         0             0      0           0              @app.route('/')
./myapp.py   157         0         0             0      0           0              def get_index():
./myapp.py   158       1.0       1.0           1.0      1           1                  candidates = []
./myapp.py   159     972.0     972.0         972.0      1         972                  election_results = get_election_results()
./myapp.py   160         0         0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   161       2.0       2.0           2.0      1           2                  candidates += election_results[:10]
./myapp.py   162       1.0       1.0           1.0      1           1                  candidates.append(election_results[-1])
./myapp.py   163         0         0             0      0           0
./myapp.py   164       6.0       6.0           6.0      1           6                  parties_name = get_all_party_name()
./myapp.py   165       1.0       1.0           1.0      1           1                  parties = {}
./myapp.py   166       0.8       0.8           0.8      5           4                  for name in parties_name:
./myapp.py   167       0.5       0.5           0.5      4           2                      parties[name] = 0
./myapp.py   168     0.613     0.613         0.613     31          19                  for r in election_results:
./myapp.py   169       0.9       0.9           0.9     30          27                      parties[r['political_party']] += r['count'] or 0
./myapp.py   170      0.25      12.0           2.6      5          13                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   171         0         0             0      0           0
./myapp.py   172       1.0       1.0           1.0      1           1                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   173     0.645     0.645         0.645     31          20                  for r in election_results:
./myapp.py   174     0.867     0.867         0.867     30          26                      if r['sex'] == '男':
./myapp.py   175      0.75      0.75          0.75     12           9                          sex_ratio['men'] += r['count'] or 0
./myapp.py   176     0.611     0.611         0.611     18          11                      elif r['sex'] == '女':
./myapp.py   177     0.889     0.889         0.889     18          16                          sex_ratio['women'] += r['count'] or 0
./myapp.py   178         0         0             0      0           0
./myapp.py   179       1.0       1.0           1.0      1           1                  return render_template('index.html',
./myapp.py   180         0         0             0      1           0                                         candidates=candidates,
./myapp.py   181       1.0       1.0           1.0      1           1                                         parties=parties,
./myapp.py   182  135583.0  135583.0      135583.0      1      135583                                         sex_ratio=sex_ratio)
./myapp.py   185         0         0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   186         0         0             0      0           0              def get_candidate(candidate_id):
./myapp.py   187     112.0     114.0         113.0      2         226                  cur = db().cursor()
./myapp.py   188       6.0       6.0           6.0      2          12                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   189       1.0       1.0           1.0      2           2                  if not candidate:
./myapp.py   190         0         0             0      0           0                      return redirect('/')
./myapp.py   191         0         0             0      0           0
./myapp.py   192         0         0             0      0           0                  #cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   193      34.0      37.0          35.5      2          71                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   194    5542.0    8331.0        6936.5      2       13873                  keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   195         0       1.0           0.5      2           1                  return render_template('candidate.html',
./myapp.py   196         0       1.0           0.5      2           1                                         candidate=candidate,
./myapp.py   197         0       1.0           0.5      2           1                                         votes=votes,
./myapp.py   198     670.0   31717.0       16193.5      2       32387                                         keywords=keywords)
./myapp.py   201         0         0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   202         0         0             0      0           0              def get_political_party(name):
./myapp.py   203       2.0       2.0           2.0      1           2                  votes = 0
./myapp.py   204    32.258    32.258        32.258     31        1000                  for r in get_election_results():
./myapp.py   205     0.733     0.733         0.733     30          22                      if r['political_party'] == name:
./myapp.py   206     0.667     0.667         0.667      6           4                          votes += r['count'] or 0
./myapp.py   207         0         0             0      0           0
./myapp.py   208         0         0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   209         0         0             0      0           0
./myapp.py   210       1.0       1.0           1.0      1           1                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   211     2.286      23.0         4.875      8          39                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   212   12061.0   12061.0       12061.0      1       12061                  keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   213       1.0       1.0           1.0      1           1                  return render_template('political_party.html',
./myapp.py   214       1.0       1.0           1.0      1           1                                         political_party=name,
./myapp.py   215       1.0       1.0           1.0      1           1                                         votes=votes,
./myapp.py   216       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   217   28479.0   28479.0       28479.0      1       28479                                         keywords=keywords)
./myapp.py   218         0         0             0      0           0
./myapp.py   219         0         0             0      0           0
./myapp.py   220         0         0             0      0           0              .route('/vote')
./myapp.py   221         0         0             0      0           0              get_vote():
./myapp.py   222         0         0             0      0           0              return constants.VOTE_HTML
./myapp.py   225         0         0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   226         0         0             0      0           0              def post_vote():
./myapp.py   227     100.0  406306.0       185.832   5319      988441  *               cur = db().cursor()
./myapp.py   228      99.0  626646.0       350.923   5319     1866561  **              raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   229         0         0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   230       1.0     169.0         3.647  42552      155166                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   231         0      34.0         1.064   5319        5660                  cur.execute('SELECT * FROM users WHERE mynumber = %s', (
./myapp.py   232     398.0  540175.0      2118.468   5319    11268132  !*********          form_base['mynumber'],
./myapp.py   233         0         0             0      0           0                  ))
./myapp.py   234      10.0     167.0        14.818   5319       78815                  user = cur.fetchone()
./myapp.py   235         0      28.0         1.776   5319        9449                  if user is not None and (user['name'] != form_base['name'] or user['address'] != form_base['address']):
./myapp.py   236         0      12.0         0.811    667         541                      user = None
./myapp.py   237         0         0             0      0           0
./myapp.py   238       4.0     128.0         5.202   5319       27672                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   239         0      58.0          0.81   5319        4310                  voted_count = 0
./myapp.py   240         0      21.0          0.83   5319        4417                  if user:
./myapp.py   241      20.0    2158.0        34.818   4284      149162                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   242         0         0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   243         0         0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   244         0         0             0      0           0                      # if not voted_count:
./myapp.py   245         0         0             0      0           0                      #     voted_count = 0
./myapp.py   246         0     121.0          0.98   5319        5214                  if not user:
./myapp.py   247         0      42.0         0.957   1035         991                      return constants.VOTE_FAIL1_HTML
./myapp.py   248       1.0      93.0         2.709   4284       11607                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   249       1.0       1.0           1.0      2           2                      return constants.VOTE_FAIL2_HTML
./myapp.py   250         0      24.0         0.941   4282        4030                  elif not form_base['candidate']:
./myapp.py   251       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL3_HTML
./myapp.py   252         0      19.0         0.785   4281        3360                  elif not candidate_id:
./myapp.py   253       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL4_HTML
./myapp.py   254         0      18.0         0.896   4280        3834                  elif not form_base['keyword']:
./myapp.py   255       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL5_HTML
./myapp.py   256         0         0             0      0           0
./myapp.py   257       1.0     141.0         1.209   4279        5172                  vote_count = int(form_base['vote_count'])
./myapp.py   258       1.0      28.0         1.131   4279        4840                  data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   259         0         0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   260      29.0    2752.0        70.781   4279      302872                  set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   261     302.0  206308.0      1002.208   4279     4288448  ****            set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   262      28.0    4695.0       350.082   4279     1498000  *               set_voted_count_cache(user['id'], vote_count)
./myapp.py   263       1.0      46.0         1.844   4279        7890                  return constants.VOTE_SUCCESS_HTML
./myapp.py   264         0         0             0      0           0
./myapp.py   265         0         0             0      0           0
./myapp.py   266         0         0             0      0           0              @app.route('/initialize')
./myapp.py   267         0         0             0      0           0              def get_initialize():
./myapp.py   268     574.0     574.0         574.0      1         574                  db_initialize()
./myapp.py   269   16467.0   16467.0       16467.0      1       16467                  r.flushdb()
./myapp.py   270         0         0             0      1           0                  return ''
./myapp.py   273         0         0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   274       1.0      30.0         1.755   5318        9332                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   277         0         0             0      0           0              def set_cache(key, val):
./myapp.py   278       1.0     966.0          8.14   8556       69650                  if not uwsgi.cache_exists(key):
./myapp.py   279       5.0    4644.0        302.23   4304     1300798  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   280         0         0             0      0           0                  else:
./myapp.py   281       4.0    2702.0        18.556   4252       78900                      uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   284         0         0             0      0           0              def get_cache(key, default=None):
./myapp.py   285         0     7.667         0.584  12901        7530                  try:
./myapp.py   286     4.667     722.0        14.257  12901      183929                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   287         0      12.5         1.047   8588        8990                  except:
./myapp.py   288     0.333      18.0         1.282   8588       11014                      return default
./myapp.py   291         0         0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   292       2.0      28.0           2.7   4278       11549                  key_name = 'voted_{}'.format(user_id)
./myapp.py   293      21.0    4686.0       341.574   4278     1461253  *               set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   296         0         0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   297       2.0     171.0         2.632   4283       11273                  key_name = 'voted_{}'.format(user_id)
./myapp.py   298      13.0    2151.0        27.052   4283      115863                  return get_cache(key_name, 0)
./myapp.py   301         0         0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   302         0      24.0         0.855   4278        3657                  key_name = md5('cv_{}'.format(
./myapp.py   303       1.0      26.0         1.826   4278        7812                      candidate_id,
./myapp.py   304       4.0      30.0         5.135   4278       21966                  ).encode('utf-8')).hexdigest()
./myapp.py   305      17.0    2736.0        54.914   4278      234921                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   308         0         0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   309     0.567       1.0         0.629     62          39                  key_name = md5('cv_{}'.format(
./myapp.py   310       1.3       4.0         1.403     62          87                      candidate_id,
./myapp.py   311       2.3       9.0         2.516     62         156                  ).encode('utf-8')).hexdigest()
./myapp.py   312    13.033      16.0        13.258     62         822                  return get_cache(key_name, 0)
./myapp.py   315         0         0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   316         0      17.0         0.851   4278        3641                  key_name = 'ckv_{}_{}'.format(
./myapp.py   317       1.0     148.0         2.358   4278       10088                      candidate_id, keyword
./myapp.py   318         0         0             0      0           0                  )
./myapp.py   319     294.0  206297.0        991.35   4278     4240995  ****            r.incr(key_name, vote_count)
./myapp.py   322         0         0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   323       1.0     2.333         2.125      8          17                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   324     0.667       1.0          0.75      8           6                  result = {}
./myapp.py   325    40.182    70.636        56.116     43        2413                  for key in r.keys(key_name):
./myapp.py   326       3.0       3.1         3.029     35         106                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   327   218.667    339.75         276.0     35        9660                      result[keyword] = int(r.get(key))
./myapp.py   328         0         0             0      0           0
./myapp.py   329         0       1.0         0.375      8           3                  return result
./myapp.py   363         0         0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   364         0         0             0      0           0              def unquote_cached(keyword):
./myapp.py   365     516.7    1020.5       641.895     19       12196                  return unquote_plus(keyword)
