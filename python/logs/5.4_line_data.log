 file_name  line  min_time  max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  --------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    63         0         0             0      0           0              def db():
./myapp.py    64      25.0     199.0        27.798   6043      167984                  if hasattr(request, 'db'):
./myapp.py    65         0         0             0      0           0                      return request.db
./myapp.py    66         0         0             0      0           0                  else:
./myapp.py    67      22.0     207.0        23.623   6043      142751                      request.db = DB_POOL.pop()
./myapp.py    68      20.0     202.0         21.78   6043      131617                      return request.db
./myapp.py    71         0         0             0      0           0              @app.teardown_request
./myapp.py    72         0         0             0      0           0              def teardown(exception=None):
./myapp.py    73      24.0    1755.0        26.854   6330      169984                  if hasattr(request, 'db'):
./myapp.py    74      21.0      76.0        22.454   6041      135645                      DB_POOL.append(request.db)
./myapp.py    75      20.0     664.0        22.288   6041      134643                      delattr(request, 'db')
./myapp.py    78         0         0             0      0           0              def get_election_results():
./myapp.py    79         0         0             0      0           0              #     cur = db().cursor()
./myapp.py    80         0         0             0      0           0              #     cur.execute("""
./myapp.py    81         0         0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    82         0         0             0      0           0              # FROM candidates AS c
./myapp.py    83         0         0             0      0           0              # LEFT OUTER JOIN
./myapp.py    84         0         0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    85         0         0             0      0           0              #   FROM votes
./myapp.py    86         0         0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    87         0         0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    88         0         0             0      0           0              # ORDER BY v.count DESC
./myapp.py    89         0         0             0      0           0              # """)
./myapp.py    90         0       1.0         0.616    289         178                  result = []
./myapp.py    91     0.903    11.419         1.209   8959       10834                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    92      21.8      96.1         26.04   8670      225771                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    93     1.233      13.4         1.667   8670       14453                      result.append(data)
./myapp.py    94         0         0             0      0           0
./myapp.py    95     0.367     504.0         3.111   8959       27871                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py    96         0       2.0         0.699    289         202                  return result
./myapp.py    99         0         0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   100         0         0             0      0           0              #     cur = db().cursor()
./myapp.py   101         0         0             0      0           0              #     cur.execute("""
./myapp.py   102         0         0             0      0           0              # SELECT keyword
./myapp.py   103         0         0             0      0           0              # FROM votes
./myapp.py   104         0         0             0      0           0              # WHERE candidate_id = %s
./myapp.py   105         0         0             0      0           0              # GROUP BY keyword
./myapp.py   106         0         0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   107         0         0             0      0           0              # LIMIT 10
./myapp.py   108         0         0             0      0           0              # """, (candidate_id,))
./myapp.py   109         0         0             0      0           0              #     records = cur.fetchall()
./myapp.py   110         0         0             0      0           0
./myapp.py   111         0         0             0      0           0                  """
./myapp.py   112         0         0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   113         0         0             0      0           0                  """
./myapp.py   114     385.0   28189.0     17889.733    146     2611901  **              keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   115         0    7594.0        40.415   1637       66160                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   116         0         0             0      0           0                  # print(result)
./myapp.py   117         0         0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   118         0       2.0         0.507    146          74                  return result
./myapp.py   119         0         0             0      0           0
./myapp.py   120         0         0             0      0           0
./myapp.py   121         0         0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   122     0.571      58.0          3.48    708        2464              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   123         0         0             0      0           0
./myapp.py   124         0         0             0      0           0                cur = db().cursor()
./myapp.py   125         0         0             0      0           0                cur.execute("""
./myapp.py   126         0         0             0      0           0              LECT keyword
./myapp.py   127         0         0             0      0           0              OM votes
./myapp.py   128         0         0             0      0           0              ERE candidate_id IN ({})
./myapp.py   129         0         0             0      0           0              OUP BY keyword
./myapp.py   130         0         0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   131         0         0             0      0           0              MIT 10
./myapp.py   132         0         0             0      0           0              ".format(candidate_ids_str))
./myapp.py   133         0         0             0      0           0                records = cur.fetchall()
./myapp.py   134         0         0             0      0           0
./myapp.py   135      28.0     167.0        45.452     73        3318              total_keywords = Counter()
./myapp.py   136       0.7       1.2         0.943    635         599              for candidate_id in candidate_ids:
./myapp.py   137    1344.0   22416.0     16175.952    562     9090885  *******         total_keywords += Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   138         0         0             0      0           0
./myapp.py   139     0.909    2984.0         39.11    876       34260              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   140         0         0             0      0           0
./myapp.py   141         0         0             0      0           0
./myapp.py   142         0         0             0      0           0              def get_all_party_name():
./myapp.py   143       2.0     359.0         7.176    216        1550                  return list(constants.PARTY_MASTER.keys())
./myapp.py   146         0         0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   147     0.125      13.0          1.25    708         885                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   150         0         0             0      0           0              def db_initialize():
./myapp.py   151     121.0     121.0         121.0      1         121                  cur = db().cursor()
./myapp.py   152     406.0     406.0         406.0      1         406                  cur.execute('DELETE FROM votes')
./myapp.py   155         0         0             0      0           0              @app.route('/')
./myapp.py   156         0         0             0      0           0              def get_index():
./myapp.py   157       1.0       4.0         1.759    216         380                  candidates = []
./myapp.py   158     947.0    3177.0      1093.912    216      236285                  election_results = get_election_results()
./myapp.py   159         0         0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   160       1.0      22.0         2.282    216         493                  candidates += election_results[:10]
./myapp.py   161         0       3.0         1.093    216         236                  candidates.append(election_results[-1])
./myapp.py   162         0         0             0      0           0
./myapp.py   163       4.0     384.0        10.824    216        2338                  parties_name = get_all_party_name()
./myapp.py   164         0       2.0         1.046    216         226                  parties = {}
./myapp.py   165       0.4       3.4         0.827   1080         893                  for name in parties_name:
./myapp.py   166       0.5      4.75         0.833    864         720                      parties[name] = 0
./myapp.py   167     0.548    10.613         0.836   6696        5597                  for r in election_results:
./myapp.py   168     0.767    10.467         1.112   6480        7205                      parties[r['political_party']] += r['count'] or 0
./myapp.py   169         0      53.0         3.469   1080        3746                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   170         0         0             0      0           0
./myapp.py   171       1.0      14.0         1.185    216         256                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   172     0.548     2.581         0.875   6696        5858                  for r in election_results:
./myapp.py   173       0.6       2.4         0.969   6480        6281                      if r['sex'] == '男':
./myapp.py   174       0.5     3.833          1.11   2592        2878                          sex_ratio['men'] += r['count'] or 0
./myapp.py   175     0.389     2.778         0.969   3888        3767                      elif r['sex'] == '女':
./myapp.py   176     0.722     2.944         1.099   3888        4271                          sex_ratio['women'] += r['count'] or 0
./myapp.py   177         0         0             0      0           0
./myapp.py   178         0      12.0         1.102    216         238                  return render_template('index.html',
./myapp.py   179         0       2.0         0.856    216         185                                         candidates=candidates,
./myapp.py   180         0      68.0         1.208    216         261                                         parties=parties,
./myapp.py   181    2209.0  149674.0      3202.356    216      691709  *                                      sex_ratio=sex_ratio)
./myapp.py   184         0         0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   185         0         0             0      0           0              def get_candidate(candidate_id):
./myapp.py   186     102.0     423.0       124.918    146       18238                  cur = db().cursor()
./myapp.py   187       4.0      20.0         4.726    146         690                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   188         0       1.0         0.712    146         104                  if not candidate:
./myapp.py   189         0         0             0      0           0                      return redirect('/')
./myapp.py   190         0         0             0      0           0
./myapp.py   191         0         0             0      0           0                  #cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   192      33.0     168.0         39.13    146        5713                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   193     431.0   28541.0     18265.747    146     2666799  **              keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   194         0       2.0         0.726    146         106                  return render_template('candidate.html',
./myapp.py   195         0       2.0         0.637    146          93                                         candidate=candidate,
./myapp.py   196         0       1.0         0.644    146          94                                         votes=votes,
./myapp.py   197     451.0   26273.0        775.37    146      113204                                         keywords=keywords)
./myapp.py   200         0         0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   201         0         0             0      0           0              def get_political_party(name):
./myapp.py   202       1.0      19.0         1.973     73         144                  votes = 0
./myapp.py   203    31.226    98.194        37.617   2263       85127                  for r in get_election_results():
./myapp.py   204     0.533     1.967         0.854   2190        1871                      if r['political_party'] == name:
./myapp.py   205       0.5     2.222         0.922    562         518                          votes += r['count'] or 0
./myapp.py   206         0         0             0      0           0
./myapp.py   207         0         0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   208         0         0             0      0           0
./myapp.py   209       1.0       4.0         2.247     73         164                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   210       2.1     128.0         7.963    708        5638                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   211   11129.0  201743.0      125057.0     73     9129161  *******         keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   212         0       1.0          0.89     73          65                  return render_template('political_party.html',
./myapp.py   213         0       1.0         0.699     73          51                                         political_party=name,
./myapp.py   214         0       2.0         0.808     73          59                                         votes=votes,
./myapp.py   215         0       1.0         0.603     73          44                                         candidates=candidates,
./myapp.py   216     708.0   28554.0      1184.726     73       86485                                         keywords=keywords)
./myapp.py   217         0         0             0      0           0
./myapp.py   218         0         0             0      0           0
./myapp.py   219         0         0             0      0           0              .route('/vote')
./myapp.py   220         0         0             0      0           0              get_vote():
./myapp.py   221         0         0             0      0           0              cur = db().cursor()
./myapp.py   222         0         0             0      0           0              cur.execute('SELECT * FROM candidates')
./myapp.py   223         0         0             0      0           0              candidates = cur.fetchall()
./myapp.py   224         0         0             0      0           0              return render_template('vote.html',
./myapp.py   225         0         0             0      0           0                                     candidates=candidates,
./myapp.py   226         0         0             0      0           0                                     message='')
./myapp.py   229         0         0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   230         0         0             0      0           0              def post_vote():
./myapp.py   231     101.0    1220.0       108.491   5896      639661  *               cur = db().cursor()
./myapp.py   232      96.0     876.0        122.77   5896      723854  *               raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   233         0         0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   234       1.0     180.0         3.568  47168      168290                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   235         0      27.0         1.037   5896        6113                  cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', (
./myapp.py   236     477.0    8772.0      2168.401   5896    12784890  !*********          form_base['mynumber'], form_base['name'], form_base['address']
./myapp.py   237         0         0             0      0           0                  ))
./myapp.py   238      10.0      77.0        13.553   5896       79909                  user = cur.fetchone()
./myapp.py   239       4.0     150.0         5.333   5896       31442                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   240         0      31.0         0.792   5896        4667                  voted_count = 0
./myapp.py   241         0      21.0         0.818   5896        4820                  if user:
./myapp.py   242      19.0     611.0        33.009   4745      156626                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   243         0         0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   244         0         0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   245         0         0             0      0           0                      # if not voted_count:
./myapp.py   246         0         0             0      0           0                      #     voted_count = 0
./myapp.py   247         0      30.0         0.898   5896        5295                  if not user:
./myapp.py   248         0      14.0         0.884   1151        1017                      return constants.VOTE_FAIL1_HTML
./myapp.py   249       1.0      25.0         2.683   4745       12732                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   250       1.0       2.0          1.25      4           5                      return constants.VOTE_FAIL2_HTML
./myapp.py   251         0      21.0         0.917   4741        4346                  elif not form_base['candidate']:
./myapp.py   252       2.0       2.0           2.0      1           2                      return constants.VOTE_FAIL3_HTML
./myapp.py   253         0      12.0         0.772   4740        3658                  elif not candidate_id:
./myapp.py   254       2.0       2.0           2.0      1           2                      return constants.VOTE_FAIL4_HTML
./myapp.py   255         0      83.0          0.89   4739        4216                  elif not form_base['keyword']:
./myapp.py   256       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL5_HTML
./myapp.py   257         0         0             0      0           0
./myapp.py   258       1.0     153.0         1.196   4738        5666                  vote_count = int(form_base['vote_count'])
./myapp.py   259       1.0      21.0         1.094   4738        5184                  data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   260         0         0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   261      29.0    2558.0        83.603   4738      396112                  set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   262     297.0    4797.0       853.916   4738     4045852  ***             set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   263      28.0    4380.0        259.45   4738     1229276  *               set_voted_count_cache(user['id'], vote_count)
./myapp.py   264         0      14.0         1.704   4738        8073                  return constants.VOTE_SUCCESS_HTML
./myapp.py   265         0         0             0      0           0
./myapp.py   266         0         0             0      0           0
./myapp.py   267         0         0             0      0           0              @app.route('/initialize')
./myapp.py   268         0         0             0      0           0              def get_initialize():
./myapp.py   269     533.0     533.0         533.0      1         533                  db_initialize()
./myapp.py   270   16414.0   16414.0       16414.0      1       16414                  r.flushdb()
./myapp.py   271       1.0       1.0           1.0      1           1                  return ''
./myapp.py   274         0         0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   275       1.0     144.0         1.791   5312        9512                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   276         0         0             0      0           0              else:
./myapp.py   277         0         0             0      0           0                  uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   278         0         0             0      0           0              def set_cache(key, val):
./myapp.py   279       1.0     971.0          8.43   9472       79849                  if not uwsgi.cache_exists(key):
./myapp.py   280       4.0    3838.0       210.009   4762     1000064  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   281         0         0             0      0           0                  else:
./myapp.py   282       4.0    2509.0         33.64   4710      158446                      uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   283         0         0             0      0           0                 283                                 return default
./myapp.py   284         0         0             0      0           0                  return default
./myapp.py   285         0         0             0      0           0              def get_cache(key, default=None):
./myapp.py   286         0     8.667         0.601  23031       13848                  try:
./myapp.py   287     4.333   620.333        12.245  23031      282006                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   288         0      67.5         0.997  10090       10059                  except:
./myapp.py   289         0      12.0         1.203   9158       11018                      return default
./myapp.py   292         0         0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   293       2.0      23.0         2.602   4736       12321                  key_name = 'voted_{}'.format(user_id)
./myapp.py   294      20.0    4368.0       250.565   4736     1186676  *               set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   295         0         0             0      0           0
./myapp.py   296         0         0             0      0           0              set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   297         0         0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   298       2.0      88.0          2.55   4744       12099                  key_name = 'voted_{}'.format(user_id)
./myapp.py   299      13.0     601.0        25.515   4744      121044                  return get_cache(key_name, 0)
./myapp.py   300         0         0             0      0           0              set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   301         0         0             0      0           0
./myapp.py   302         0         0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   303         0      12.0         0.815   4736        3862                  key_name = md5('cv_{}'.format(
./myapp.py   304       1.0      27.0         1.852   4736        8772                      candidate_id,
./myapp.py   305       4.0      56.0         5.072   4736       24019                  ).encode('utf-8')).hexdigest()
./myapp.py   306      16.0    2542.0        67.818   4736      321188                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   307         0         0             0      0           0              return get_cache(key_name, 0)
./myapp.py   308         0         0             0      0           0                 308                             return get_cache(key_name, 0)
./myapp.py   309         0         0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   310         0    12.133         0.748   8816        6597                  key_name = md5('cv_{}'.format(
./myapp.py   311     1.033    16.833         1.549   8816       13653                      candidate_id,
./myapp.py   312     2.133      25.0         2.646   8816       23328                  ).encode('utf-8')).hexdigest()
./myapp.py   313    11.833     151.0        14.774   8816      130249                  return get_cache(key_name, 0)
./myapp.py   314         0         0             0      0           0                 314                             )
./myapp.py   315         0         0             0      0           0                 315                             r.incr(key_name, vote_count)
./myapp.py   316         0         0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   317         0      25.0         0.911   4736        4313                  key_name = 'ckv_{}_{}'.format(
./myapp.py   318       1.0      27.0         2.261   4736       10710                      candidate_id, keyword
./myapp.py   319         0         0             0      0           0                  )
./myapp.py   320     289.0    4786.0        843.03   4736     3992589  ***             r.incr(key_name, vote_count)
./myapp.py   321         0         0             0      0           0                 321                                 keyword = key.decode('utf-8').split('_')[2]
./myapp.py   322         0         0             0      0           0                 322                                 result[keyword] = int(r.get(key))
./myapp.py   323         0         0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   324       1.0     3.167          2.75      8          22                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   325       1.0       1.0           1.0      8           8                  result = {}
./myapp.py   326     29.75    90.826        61.064     47        2870                  for key in r.keys(key_name):
./myapp.py   327       3.0     3.294         3.154     39         123                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   328   218.545   309.706       259.026     39       10102                      result[keyword] = int(r.get(key))
./myapp.py   329         0         0             0      0           0
./myapp.py   330         0       1.0           0.5      8           4                  return result
./myapp.py   364         0         0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   365         0         0             0      0           0              def unquote_cached(keyword):
./myapp.py   366     307.0     741.0       624.833     18       11247                  return unquote_plus(keyword)
