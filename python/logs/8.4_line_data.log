 file_name  line  min_time  max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  --------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    83         0         0             0      0           0              def get_election_results():
./myapp.py    84         0         0             0      0           0              #     cur = db().cursor()
./myapp.py    85         0         0             0      0           0              #     cur.execute("""
./myapp.py    86         0         0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    87         0         0             0      0           0              # FROM candidates AS c
./myapp.py    88         0         0             0      0           0              # LEFT OUTER JOIN
./myapp.py    89         0         0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    90         0         0             0      0           0              #   FROM votes
./myapp.py    91         0         0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    92         0         0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    93         0         0             0      0           0              # ORDER BY v.count DESC
./myapp.py    94         0         0             0      0           0              # """)
./myapp.py    95       1.0       1.0           1.0      2           2                  result = []
./myapp.py    96     1.032     1.032         1.032     62          64                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    97    23.133    23.467          23.3     60        1398                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    98     1.567     1.567         1.567     60          94                      result.append(data)
./myapp.py    99         0         0             0      0           0
./myapp.py   100     0.533      59.0         2.435     62         151                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py   101         0       1.0           0.5      2           1                  return result
./myapp.py   104         0         0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   105         0         0             0      0           0              #     cur = db().cursor()
./myapp.py   106         0         0             0      0           0              #     cur.execute("""
./myapp.py   107         0         0             0      0           0              # SELECT keyword
./myapp.py   108         0         0             0      0           0              # FROM votes
./myapp.py   109         0         0             0      0           0              # WHERE candidate_id = %s
./myapp.py   110         0         0             0      0           0              # GROUP BY keyword
./myapp.py   111         0         0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   112         0         0             0      0           0              # LIMIT 10
./myapp.py   113         0         0             0      0           0              # """, (candidate_id,))
./myapp.py   114         0         0             0      0           0              #     records = cur.fetchall()
./myapp.py   115         0         0             0      0           0
./myapp.py   116         0         0             0      0           0                  """
./myapp.py   117         0         0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   118         0         0             0      0           0                  """
./myapp.py   119    3005.0    3369.0        3187.0      2        6374                  keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   120   193.545    8848.0       919.542     24       22069                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   121         0         0             0      0           0                  # print(result)
./myapp.py   122         0         0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   123         0       1.0           0.5      2           1                  return result
./myapp.py   124         0         0             0      0           0
./myapp.py   125         0         0             0      0           0
./myapp.py   126         0         0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   127     0.714      13.0          2.25      8          18              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   128         0         0             0      0           0
./myapp.py   129         0         0             0      0           0                cur = db().cursor()
./myapp.py   130         0         0             0      0           0                cur.execute("""
./myapp.py   131         0         0             0      0           0              LECT keyword
./myapp.py   132         0         0             0      0           0              OM votes
./myapp.py   133         0         0             0      0           0              ERE candidate_id IN ({})
./myapp.py   134         0         0             0      0           0              OUP BY keyword
./myapp.py   135         0         0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   136         0         0             0      0           0              MIT 10
./myapp.py   137         0         0             0      0           0              ".format(candidate_ids_str))
./myapp.py   138         0         0             0      0           0                records = cur.fetchall()
./myapp.py   139         0         0             0      0           0
./myapp.py   140      29.0      29.0          29.0      1          29              total_keywords = Counter()
./myapp.py   141       1.0       1.0           1.0      7           7              for candidate_id in candidate_ids:
./myapp.py   142     779.5     779.5         779.5      6        4677                  total_keywords.update(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   143         0         0             0      0           0
./myapp.py   144      66.5     575.0         123.0      9        1107              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   145         0         0             0      0           0
./myapp.py   146         0         0             0      0           0
./myapp.py   147         0         0             0      0           0              def get_all_party_name():
./myapp.py   148       3.0       3.0           3.0      1           3                  return list(constants.PARTY_MASTER.keys())
./myapp.py   151         0         0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   152       1.0       3.0         1.375      8          11                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   155         0         0             0      0           0              def db_initialize():
./myapp.py   156         0         0             0      1           0                  pass
./myapp.py   159         0         0             0      0           0              @app.route('/')
./myapp.py   160         0         0             0      0           0              def get_index():
./myapp.py   161       2.0       2.0           2.0      1           2                  candidates = []
./myapp.py   162     997.0     997.0         997.0      1         997                  election_results = get_election_results()
./myapp.py   163         0         0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   164       2.0       2.0           2.0      1           2                  candidates += election_results[:10]
./myapp.py   165       1.0       1.0           1.0      1           1                  candidates.append(election_results[-1])
./myapp.py   166         0         0             0      0           0
./myapp.py   167       6.0       6.0           6.0      1           6                  parties_name = get_all_party_name()
./myapp.py   168       1.0       1.0           1.0      1           1                  parties = {}
./myapp.py   169       0.8       0.8           0.8      5           4                  for name in parties_name:
./myapp.py   170       0.5       0.5           0.5      4           2                      parties[name] = 0
./myapp.py   171     0.645     0.645         0.645     31          20                  for r in election_results:
./myapp.py   172     0.833     0.833         0.833     30          25                      parties[r['political_party']] += r['count'] or 0
./myapp.py   173       1.0      13.0           3.4      5          17                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   174         0         0             0      0           0
./myapp.py   175       1.0       1.0           1.0      1           1                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   176     0.677     0.677         0.677     31          21                  for r in election_results:
./myapp.py   177       0.6       0.6           0.6     30          18                      if r['sex'] == '男':
./myapp.py   178     0.833     0.833         0.833     12          10                          sex_ratio['men'] += r['count'] or 0
./myapp.py   179     0.667     0.667         0.667     18          12                      elif r['sex'] == '女':
./myapp.py   180     0.889     0.889         0.889     18          16                          sex_ratio['women'] += r['count'] or 0
./myapp.py   181      18.0      18.0          18.0      1          18                  cached_html = get_index_page_cache()
./myapp.py   182       2.0       2.0           2.0      1           2                  if cached_html:
./myapp.py   183         0         0             0      0           0                      return cached_html
./myapp.py   184         0         0             0      0           0
./myapp.py   185       2.0       2.0           2.0      1           2                  html = render_template('index.html',
./myapp.py   186       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   187         0         0             0      1           0                                         parties=parties,
./myapp.py   188  153918.0  153918.0      153918.0      1      153918                                         sex_ratio=sex_ratio)
./myapp.py   189         0         0             0      0           0
./myapp.py   190      40.0      40.0          40.0      1          40                  set_index_page_cache(html)
./myapp.py   191       1.0       1.0           1.0      1           1                  return html
./myapp.py   193         0         0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   194         0         0             0      0           0              def get_candidate(candidate_id):
./myapp.py   195       6.0       7.0           6.5      2          13                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   196       1.0       1.0           1.0      2           2                  if not candidate:
./myapp.py   197         0         0             0      0           0                      return redirect('/')
./myapp.py   198         0         0             0      0           0                  # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   199      35.0      40.0          37.5      2          75                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   200    5680.0   11863.0        8771.5      2       17543                  keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   201       1.0       1.0           1.0      2           2                  return render_template('candidate.html',
./myapp.py   202       1.0       1.0           1.0      2           2                                         candidate=candidate,
./myapp.py   203         0         0             0      2           0                                         votes=votes,
./myapp.py   204     693.0   25843.0       13268.0      2       26536                                         keywords=keywords)
./myapp.py   207         0         0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   208         0         0             0      0           0              def get_political_party(name):
./myapp.py   209       2.0       2.0           2.0      1           2                  votes = 0
./myapp.py   210    32.645    32.645        32.645     31        1012                  for r in get_election_results():
./myapp.py   211       0.7       0.7           0.7     30          21                      if r['political_party'] == name:
./myapp.py   212     0.667     0.667         0.667      6           4                          votes += r['count'] or 0
./myapp.py   213         0         0             0      0           0
./myapp.py   214         0         0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   215         0         0             0      0           0
./myapp.py   216       2.0       2.0           2.0      1           2                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   217     2.286      23.0         4.875      8          39                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   218    5330.0    5330.0        5330.0      1        5330                  keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   219       1.0       1.0           1.0      1           1                  return render_template('political_party.html',
./myapp.py   220         0         0             0      1           0                                         political_party=name,
./myapp.py   221       1.0       1.0           1.0      1           1                                         votes=votes,
./myapp.py   222       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   223   28511.0   28511.0       28511.0      1       28511                                         keywords=keywords)
./myapp.py   224         0         0             0      0           0
./myapp.py   225         0         0             0      0           0
./myapp.py   226         0         0             0      0           0              .route('/vote')
./myapp.py   227         0         0             0      0           0              get_vote():
./myapp.py   228         0         0             0      0           0              return constants.VOTE_HTML
./myapp.py   231         0         0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   232         0         0             0      0           0              def post_vote():
./myapp.py   233         0         0             0      0           0                  #cur = db().cursor()
./myapp.py   234     104.0   93594.0       146.492   5293      775381  **              raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   235         0         0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   236       1.0     672.0         3.741  42336      158400                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   237       1.0      20.0         1.252   5292        6628                  data = (form_base['mynumber'], form_base['name'], form_base['address'])
./myapp.py   238         0         0             0      0           0                  # cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', data)
./myapp.py   239         0         0             0      0           0                  # user = cur.fetchone()
./myapp.py   240     292.0   23046.0       823.567   5292     4358317  !*********      cache = get_user_cache(*data)
./myapp.py   241         0      22.0         0.853   5292        4512                  if cache:
./myapp.py   242         0      21.0         0.898   4255        3822                      user_id, user_votes = cache
./myapp.py   243         0         0             0      0           0                  else:
./myapp.py   244         0      19.0         0.924   1037         958                      user_id, user_votes = (None, None)
./myapp.py   245         0         0             0      0           0
./myapp.py   246       4.0     761.0         6.647   5292       35176                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   247         0      28.0         0.826   5292        4372                  voted_count = 0
./myapp.py   248         0      22.0         0.818   5292        4329                  if user_id:
./myapp.py   249      21.0    1746.0        36.158   4255      153854                      voted_count = get_voted_count_cache(user_id)
./myapp.py   250         0         0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   251         0         0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   252         0         0             0      0           0                      # if not voted_count:
./myapp.py   253         0         0             0      0           0                      #     voted_count = 0
./myapp.py   254         0      62.0         0.895   5292        4735                  if not user_id:
./myapp.py   255         0       9.0         0.913   1037         947                      return constants.VOTE_FAIL1_HTML
./myapp.py   256       1.0      42.0         2.656   4255       11302                  elif user_votes < (int(form_base['vote_count']) + voted_count):
./myapp.py   257       1.0       2.0         1.333      3           4                      return constants.VOTE_FAIL2_HTML
./myapp.py   258         0      15.0         0.991   4252        4212                  elif not form_base['candidate']:
./myapp.py   259       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL3_HTML
./myapp.py   260         0      27.0         0.801   4251        3406                  elif not candidate_id:
./myapp.py   261       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL4_HTML
./myapp.py   262         0      20.0         0.982   4250        4173                  elif not form_base['keyword']:
./myapp.py   263       2.0       2.0           2.0      1           2                      return constants.VOTE_FAIL5_HTML
./myapp.py   264         0         0             0      0           0
./myapp.py   265       1.0      23.0         1.228   4249        5217                  vote_count = int(form_base['vote_count'])
./myapp.py   266         0         0             0      0           0                  #data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   267         0         0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   268      29.0    1865.0        65.401   4249      277887  *               set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   269     275.0    4544.0       846.491   4249     3596740  ********        set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   270      28.0    4683.0       271.095   4249     1151881  ***             set_voted_count_cache(user_id, vote_count)
./myapp.py   271         0         0             0      0           0
./myapp.py   272       8.0    4422.0        340.36   4249     1446189  ***             clear_index_page_cache()
./myapp.py   273       1.0      19.0          1.86   4249        7903                  return constants.VOTE_SUCCESS_HTML
./myapp.py   274         0         0             0      0           0
./myapp.py   275         0         0             0      0           0
./myapp.py   276         0         0             0      0           0              @app.route('/initialize')
./myapp.py   277         0         0             0      0           0              def get_initialize():
./myapp.py   278       6.0       6.0           6.0      1           6                  db_initialize()
./myapp.py   279   16843.0   16843.0       16843.0      1       16843                  r.flushdb()
./myapp.py   280       1.0       1.0           1.0      1           1                  return ''
./myapp.py   283         0         0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   284       1.0      24.0         1.903   5292       10072                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   287         0         0             0      0           0              def set_cache(key, val):
./myapp.py   288       1.0     743.0         8.938  12748      113946                  if not uwsgi.cache_exists(key):
./myapp.py   289       4.0    4633.0       218.879   4276      935926  **                  uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   290         0         0             0      0           0                  else:
./myapp.py   291       2.0    2207.5       167.974   8472     1423079  ***                 uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   294         0         0             0      0           0              def get_cache(key, default=None):
./myapp.py   295     0.333      10.0         0.911  12816       11678                  try:
./myapp.py   296       5.0  1151.333        14.543  12816      186378                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   297         0      24.5          1.07   8528        9122                  except:
./myapp.py   298     0.333      11.0         1.231   8528       10496                      return default
./myapp.py   301         0         0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   302       2.0      42.0         2.948   4249       12525                  key_name = 'voted_{}'.format(user_id)
./myapp.py   303      21.0    4674.0       262.114   4249     1113723  ***             set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   306         0         0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   307       2.0      37.0          2.61   4255       11104                  key_name = 'voted_{}'.format(user_id)
./myapp.py   308      15.0    1709.0        28.397   4255      120831                  return get_cache(key_name, 0)
./myapp.py   311         0         0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   312         0      22.0         0.832   4249        3535                  key_name = md5('cv_{}'.format(
./myapp.py   313       1.0      22.0         1.859   4249        7899                      candidate_id,
./myapp.py   314       3.0      35.0          4.67   4249       19841                  ).encode('utf-8')).hexdigest()
./myapp.py   315      17.0    1842.0        49.937   4249      212183                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   318         0         0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   319     0.467       1.0         0.613     62          38                  key_name = md5('cv_{}'.format(
./myapp.py   320     1.233       5.0         1.419     62          88                      candidate_id,
./myapp.py   321     2.233       9.0         2.516     62         156                  ).encode('utf-8')).hexdigest()
./myapp.py   322    12.767      18.0        13.129     62         814                  return get_cache(key_name, 0)
./myapp.py   325         0         0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   326         0      49.0          0.82   4249        3484                  key_name = 'ckv_{}_{}'.format(
./myapp.py   327       1.0      45.0         2.341   4249        9949                      candidate_id, keyword
./myapp.py   328         0         0             0      0           0                  )
./myapp.py   329     266.0    4534.0       835.884   4249     3551669  ********        r.incr(key_name, vote_count)
./myapp.py   332         0         0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   333       1.0     2.333         2.125      8          17                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   334     0.833       1.0         0.875      8           7                  result = {}
./myapp.py   335    25.929    96.688        56.659     41        2323                  for key in r.keys(key_name):
./myapp.py   336     2.846       3.1          2.97     33          98                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   337   219.154     272.5       236.424     33        7802                      result[keyword] = int(r.get(key))
./myapp.py   338         0         0             0      0           0
./myapp.py   339         0       1.0         0.375      8           3                  return result
./myapp.py   342         0         0             0      0           0              def set_index_page_cache(html):
./myapp.py   343      36.0      36.0          36.0      1          36                  set_cache('index', html)
./myapp.py   346         0         0             0      0           0              def get_index_page_cache():
./myapp.py   347      14.0      14.0          14.0      1          14                  return get_cache('index', None)
./myapp.py   350         0         0             0      0           0              def clear_index_page_cache():
./myapp.py   351       6.0    4417.0       334.936   4249     1423144  ***             set_cache('index', None)
./myapp.py   358         0         0             0      0           0              def get_user_cache(mynumber, name, address):
./myapp.py   359         0      19.0         0.747   5292        3955                  key_name = md5('{}{}{}'.format(
./myapp.py   360       2.0      26.0         2.336   5292       12362                      mynumber, name, address
./myapp.py   361       4.0      32.0         4.866   5292       25750                  ).encode('utf-8')).hexdigest()
./myapp.py   362     266.0   23015.0       794.098   5292     4202366  **********      cache = r2.get(key_name)
./myapp.py   363         0      18.0         0.746   5292        3948                  if cache:
./myapp.py   364       2.0      39.0         3.565   4255       15168                      user_id, votes = cache.decode('utf-8').split(':')
./myapp.py   365       2.0      23.0         2.571   4255       10938                      return int(user_id), int(votes)
./myapp.py   366         0       8.0          0.61   1037         633                  return None
./myapp.py   369         0         0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   370         0         0             0      0           0              def unquote_cached(keyword):
./myapp.py   371     421.0     875.5       711.313     16       11381                  return unquote_plus(keyword)
