 file_name  line  min_time  max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  --------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    64         0         0             0      0           0              def db():
./myapp.py    65      25.0     100.0        27.476   5658      155460                  if hasattr(request, 'db'):
./myapp.py    66         0         0             0      0           0                      return request.db
./myapp.py    67         0         0             0      0           0                  else:
./myapp.py    68      21.0      96.0        23.484   5658      132871                      request.db = DB_POOL.pop()
./myapp.py    69      20.0     118.0        21.947   5658      124174                      return request.db
./myapp.py    72         0         0             0      0           0              @app.teardown_request
./myapp.py    73         0         0             0      0           0              def teardown(exception=None):
./myapp.py    74      25.0      68.0        26.216   5664      148488                  if hasattr(request, 'db'):
./myapp.py    75      21.0     149.0         22.44   5658      126963                      DB_POOL.append(request.db)
./myapp.py    76      20.0     690.0        21.646   5658      122475                      delattr(request, 'db')
./myapp.py    79         0         0             0      0           0              def get_election_results():
./myapp.py    80         0         0             0      0           0              #     cur = db().cursor()
./myapp.py    81         0         0             0      0           0              #     cur.execute("""
./myapp.py    82         0         0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    83         0         0             0      0           0              # FROM candidates AS c
./myapp.py    84         0         0             0      0           0              # LEFT OUTER JOIN
./myapp.py    85         0         0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    86         0         0             0      0           0              #   FROM votes
./myapp.py    87         0         0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    88         0         0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    89         0         0             0      0           0              # ORDER BY v.count DESC
./myapp.py    90         0         0             0      0           0              # """)
./myapp.py    91         0       1.0          0.75      4           3                  result = []
./myapp.py    92       1.0     1.161         1.089    124         135                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    93    22.533    23.633        23.025    120        2763                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    94     1.433       1.9         1.658    120         199                      result.append(data)
./myapp.py    95         0         0             0      0           0
./myapp.py    96     0.467      63.0         2.484    124         308                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py    97         0       1.0           0.5      4           2                  return result
./myapp.py   100         0         0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   101         0         0             0      0           0              #     cur = db().cursor()
./myapp.py   102         0         0             0      0           0              #     cur.execute("""
./myapp.py   103         0         0             0      0           0              # SELECT keyword
./myapp.py   104         0         0             0      0           0              # FROM votes
./myapp.py   105         0         0             0      0           0              # WHERE candidate_id = %s
./myapp.py   106         0         0             0      0           0              # GROUP BY keyword
./myapp.py   107         0         0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   108         0         0             0      0           0              # LIMIT 10
./myapp.py   109         0         0             0      0           0              # """, (candidate_id,))
./myapp.py   110         0         0             0      0           0              #     records = cur.fetchall()
./myapp.py   111         0         0             0      0           0
./myapp.py   112         0         0             0      0           0                  """
./myapp.py   113         0         0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   114         0         0             0      0           0                  """
./myapp.py   115    3016.0   18766.0      8459.333      3       25378                  keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   116    14.818    9268.0       706.806     36       25445                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   117         0         0             0      0           0                  # print(result)
./myapp.py   118         0         0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   119         0       1.0         0.667      3           2                  return result
./myapp.py   120         0         0             0      0           0
./myapp.py   121         0         0             0      0           0
./myapp.py   122         0         0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   123       1.0      13.0           2.5      8          20              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   124         0         0             0      0           0
./myapp.py   125         0         0             0      0           0                cur = db().cursor()
./myapp.py   126         0         0             0      0           0                cur.execute("""
./myapp.py   127         0         0             0      0           0              LECT keyword
./myapp.py   128         0         0             0      0           0              OM votes
./myapp.py   129         0         0             0      0           0              ERE candidate_id IN ({})
./myapp.py   130         0         0             0      0           0              OUP BY keyword
./myapp.py   131         0         0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   132         0         0             0      0           0              MIT 10
./myapp.py   133         0         0             0      0           0              ".format(candidate_ids_str))
./myapp.py   134         0         0             0      0           0                records = cur.fetchall()
./myapp.py   135         0         0             0      0           0
./myapp.py   136      32.0      32.0          32.0      1          32              total_keywords = Counter()
./myapp.py   137     0.429     0.429         0.429      7           3              for candidate_id in candidate_ids:
./myapp.py   138  1225.833  1225.833      1225.833      6        7355                  total_keywords.update(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   139         0         0             0      0           0
./myapp.py   140    40.364     585.0         85.75     12        1029              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   141         0         0             0      0           0
./myapp.py   142         0         0             0      0           0
./myapp.py   143         0         0             0      0           0              def get_all_party_name():
./myapp.py   144       2.0       3.0           2.5      2           5                  return list(constants.PARTY_MASTER.keys())
./myapp.py   147         0         0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   148     0.333       3.0         0.889      9           8                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   151         0         0             0      0           0              def db_initialize():
./myapp.py   152     125.0     125.0         125.0      1         125                  cur = db().cursor()
./myapp.py   153     442.0     442.0         442.0      1         442                  cur.execute('DELETE FROM votes')
./myapp.py   156         0         0             0      0           0              @app.route('/')
./myapp.py   157         0         0             0      0           0              def get_index():
./myapp.py   158       1.0       2.0           1.5      2           3                  candidates = []
./myapp.py   159     982.0    1017.0         999.5      2        1999                  election_results = get_election_results()
./myapp.py   160         0         0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   161       2.0       2.0           2.0      2           4                  candidates += election_results[:10]
./myapp.py   162       1.0       1.0           1.0      2           2                  candidates.append(election_results[-1])
./myapp.py   163         0         0             0      0           0
./myapp.py   164       5.0       6.0           5.5      2          11                  parties_name = get_all_party_name()
./myapp.py   165         0       1.0           0.5      2           1                  parties = {}
./myapp.py   166       0.8       0.8           0.8     10           8                  for name in parties_name:
./myapp.py   167      0.75       1.0         0.875      8           7                      parties[name] = 0
./myapp.py   168     0.645     0.677         0.661     62          41                  for r in election_results:
./myapp.py   169       0.9     0.967         0.933     60          56                      parties[r['political_party']] += r['count'] or 0
./myapp.py   170       0.5      13.0           2.9     10          29                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   171         0         0             0      0           0
./myapp.py   172       1.0       1.0           1.0      2           2                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   173     0.613      0.71         0.661     62          41                  for r in election_results:
./myapp.py   174     0.633     0.767           0.7     60          42                      if r['sex'] == '男':
./myapp.py   175      0.75     0.917         0.833     24          20                          sex_ratio['men'] += r['count'] or 0
./myapp.py   176     0.556     0.667         0.611     36          22                      elif r['sex'] == '女':
./myapp.py   177     0.778     0.944         0.861     36          31                          sex_ratio['women'] += r['count'] or 0
./myapp.py   178      19.0      20.0          19.5      2          39                  cached_html = get_index_page_cache()
./myapp.py   179       1.0       1.0           1.0      2           2                  if cached_html:
./myapp.py   180         0         0             0      0           0                      return cached_html
./myapp.py   181         0         0             0      0           0
./myapp.py   182       1.0       1.0           1.0      2           2                  html = render_template('index.html',
./myapp.py   183         0       1.0           0.5      2           1                                         candidates=candidates,
./myapp.py   184       1.0       1.0           1.0      2           2                                         parties=parties,
./myapp.py   185    2248.0  144102.0       73175.0      2      146350                                         sex_ratio=sex_ratio)
./myapp.py   186         0         0             0      0           0
./myapp.py   187      36.0      55.0          45.5      2          91                  set_index_page_cache(html)
./myapp.py   188       1.0       1.0           1.0      2           2                  return html
./myapp.py   190         0         0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   191         0         0             0      0           0              def get_candidate(candidate_id):
./myapp.py   192       5.0       7.0           6.0      3          18                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   193         0       1.0         0.667      3           2                  if not candidate:
./myapp.py   194         0         0             0      0           0                      return redirect('/')
./myapp.py   195         0         0             0      0           0                  # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   196      35.0      39.0        36.667      3         110                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   197    6921.0   19140.0     12784.667      3       38354                  keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   198       1.0       1.0           1.0      3           3                  return render_template('candidate.html',
./myapp.py   199       1.0       1.0           1.0      3           3                                         candidate=candidate,
./myapp.py   200         0       1.0         0.333      3           1                                         votes=votes,
./myapp.py   201     598.0   25850.0      9072.333      3       27217                                         keywords=keywords)
./myapp.py   204         0         0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   205         0         0             0      0           0              def get_political_party(name):
./myapp.py   206       1.0       2.0           1.5      2           3                  votes = 0
./myapp.py   207    31.839    32.355        32.097     62        1990                  for r in get_election_results():
./myapp.py   208     0.633     0.767           0.7     60          42                      if r['political_party'] == name:
./myapp.py   209     0.667     0.714         0.692     13           9                          votes += r['count'] or 0
./myapp.py   210         0         0             0      0           0
./myapp.py   211         0         0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   212         0         0             0      0           0
./myapp.py   213       1.0       2.0           1.5      2           3                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   214      2.25      28.0         5.118     17          87                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   215    8021.0  134621.0       71321.0      2      142642                  keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   216       1.0       1.0           1.0      2           2                  return render_template('political_party.html',
./myapp.py   217         0       1.0           0.5      2           1                                         political_party=name,
./myapp.py   218       1.0       1.0           1.0      2           2                                         votes=votes,
./myapp.py   219       1.0       1.0           1.0      2           2                                         candidates=candidates,
./myapp.py   220     783.0   28705.0       14744.0      2       29488                                         keywords=keywords)
./myapp.py   221         0         0             0      0           0
./myapp.py   222         0         0             0      0           0
./myapp.py   223         0         0             0      0           0              .route('/vote')
./myapp.py   224         0         0             0      0           0              get_vote():
./myapp.py   225         0         0             0      0           0              return constants.VOTE_HTML
./myapp.py   228         0         0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   229         0         0             0      0           0              def post_vote():
./myapp.py   230      99.0  323510.0        168.64   5657      953996  *               cur = db().cursor()
./myapp.py   231     101.0  581063.0       299.548   5657     1694541  *               raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   232         0         0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   233       1.0     110.0           3.6  45256      162923                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   234       1.0     114.0         1.267   5657        7170                  data = (form_base['mynumber'], form_base['name'], form_base['address'])
./myapp.py   235     436.0    9699.0      2043.077   5657    11557688  !*********      cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', data)
./myapp.py   236      10.0      62.0        13.631   5657       77111                  user = cur.fetchone()
./myapp.py   237       4.0      34.0         5.328   5657       30139                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   238         0      42.0         0.784   5657        4434                  voted_count = 0
./myapp.py   239         0      26.0         0.813   5657        4599                  if user:
./myapp.py   240      20.0     487.0        33.812   4554      153981                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   241         0         0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   242         0         0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   243         0         0             0      0           0                      # if not voted_count:
./myapp.py   244         0         0             0      0           0                      #     voted_count = 0
./myapp.py   245         0      19.0         0.861   5657        4871                  if not user:
./myapp.py   246         0      18.0         0.992   1103        1094                      return constants.VOTE_FAIL1_HTML
./myapp.py   247       1.0      24.0         2.699   4554       12291                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   248       1.0       2.0         1.333      6           8                      return constants.VOTE_FAIL2_HTML
./myapp.py   249         0      25.0         0.891   4548        4053                  elif not form_base['candidate']:
./myapp.py   250       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL3_HTML
./myapp.py   251         0      11.0         0.761   4547        3462                  elif not candidate_id:
./myapp.py   252       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL4_HTML
./myapp.py   253         0      22.0         0.863   4546        3923                  elif not form_base['keyword']:
./myapp.py   254       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL5_HTML
./myapp.py   255         0         0             0      0           0
./myapp.py   256         0      19.0         1.102   4545        5008                  vote_count = int(form_base['vote_count'])
./myapp.py   257         0         0             0      0           0                  #data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   258         0         0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   259      28.0    2877.0       136.525   4545      620507  *               set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   260     297.0    7246.0       918.078   4545     4172664  ****            set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   261      28.0    2876.0       235.802   4545     1071718  *               set_voted_count_cache(user['id'], vote_count)
./myapp.py   262         0         0             0      0           0
./myapp.py   263       9.0    3826.0       420.729   4545     1912215  **              clear_index_page_cache()
./myapp.py   264       1.0      22.0         1.846   4545        8390                  return constants.VOTE_SUCCESS_HTML
./myapp.py   265         0         0             0      0           0
./myapp.py   266         0         0             0      0           0
./myapp.py   267         0         0             0      0           0              @app.route('/initialize')
./myapp.py   268         0         0             0      0           0              def get_initialize():
./myapp.py   269     572.0     572.0         572.0      1         572                  db_initialize()
./myapp.py   270   16535.0   16535.0       16535.0      1       16535                  r.flushdb()
./myapp.py   271         0         0             0      1           0                  return ''
./myapp.py   274         0         0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   275       1.0      28.0         1.702   5657        9631                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   278         0         0             0      0           0              def set_cache(key, val):
./myapp.py   279       1.0   773.667         9.203  13637      125495                  if not uwsgi.cache_exists(key):
./myapp.py   280       4.0    2828.0       184.606   4572      844019  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   281         0         0             0      0           0                  else:
./myapp.py   282       2.0    2003.0       243.413   9065     2206537  **                  uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   285         0         0             0      0           0              def get_cache(key, default=None):
./myapp.py   286         0     6.667         0.571  13769        7865                  try:
./myapp.py   287     4.667     513.0        14.174  13769      195158                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   288         0      11.0         1.046   9124        9543                  except:
./myapp.py   289         0      10.0         1.249   9124       11400                      return default
./myapp.py   292         0         0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   293       2.0      24.0         2.601   4545       11823                  key_name = 'voted_{}'.format(user_id)
./myapp.py   294      21.0    2868.0       225.462   4545     1024724  *               set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   297         0         0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   298       2.0      26.0         2.771   4554       12621                  key_name = 'voted_{}'.format(user_id)
./myapp.py   299      13.0     480.0        26.234   4554      119469                  return get_cache(key_name, 0)
./myapp.py   302         0         0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   303         0      36.0         0.818   4545        3720                  key_name = md5('cv_{}'.format(
./myapp.py   304       1.0      31.0         1.778   4545        8080                      candidate_id,
./myapp.py   305       4.0      26.0         5.211   4545       23683                  ).encode('utf-8')).hexdigest()
./myapp.py   306      15.0    2862.0       121.023   4545      550048                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   309         0         0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   310         0       2.0         0.642    123          79                  key_name = md5('cv_{}'.format(
./myapp.py   311       1.2       4.0         1.398    123         172                      candidate_id,
./myapp.py   312     2.267       9.0          2.52    123         310                  ).encode('utf-8')).hexdigest()
./myapp.py   313    12.433      21.0        12.967    123        1595                  return get_cache(key_name, 0)
./myapp.py   316         0         0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   317         0      20.0         0.905   4545        4112                  key_name = 'ckv_{}_{}'.format(
./myapp.py   318       1.0      21.0         2.401   4545       10914                      candidate_id, keyword
./myapp.py   319         0         0             0      0           0                  )
./myapp.py   320     290.0    7235.0       905.721   4545     4116502  ****            r.incr(key_name, vote_count)
./myapp.py   323         0         0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   324       2.0       3.0         2.333      9          21                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   325       1.0       1.0           1.0      9           9                  result = {}
./myapp.py   326    25.333   105.188        60.149     67        4030                  for key in r.keys(key_name):
./myapp.py   327     3.143     4.067         3.448     58         200                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   328   217.786  1125.733       473.879     58       27485                      result[keyword] = int(r.get(key))
./myapp.py   329         0         0             0      0           0
./myapp.py   330         0       1.0         0.667      9           6                  return result
./myapp.py   332         0         0             0      0           0              def set_index_page_cache(html):
./myapp.py   333      30.0      51.0          40.5      2          81                  set_cache('index', html)
./myapp.py   336         0         0             0      0           0              def get_index_page_cache():
./myapp.py   337      15.0      15.0          15.0      2          30                  return get_cache('index', None)
./myapp.py   339         0         0             0      0           0              def clear_index_page_cache():
./myapp.py   340       6.0    3820.0       415.261   4545     1887363  **              set_cache('index', None)
./myapp.py   375         0         0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   376         0         0             0      0           0              def unquote_cached(keyword):
./myapp.py   377     146.0     917.4       755.647     17       12846                  return unquote_plus(keyword)
