 file_name  line  min_time   max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  ---------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    64         0          0             0      0           0              def db():
./myapp.py    65      24.0      230.0        28.727   5054      145184                  if hasattr(request, 'db'):
./myapp.py    66         0          0             0      0           0                      return request.db
./myapp.py    67         0          0             0      0           0                  else:
./myapp.py    68      21.0      227.0        23.791   5054      120242                      request.db = DB_POOL.pop()
./myapp.py    69      20.0      208.0        22.524   5054      113836                      return request.db
./myapp.py    72         0          0             0      0           0              @app.teardown_request
./myapp.py    73         0          0             0      0           0              def teardown(exception=None):
./myapp.py    74      24.0      166.0        26.388   5346      141068                  if hasattr(request, 'db'):
./myapp.py    75      21.0       87.0        22.321   5053      112790                      DB_POOL.append(request.db)
./myapp.py    76      20.0      172.0        21.796   5053      110137                      delattr(request, 'db')
./myapp.py    79         0          0             0      0           0              def get_election_results():
./myapp.py    80         0          0             0      0           0              #     cur = db().cursor()
./myapp.py    81         0          0             0      0           0              #     cur.execute("""
./myapp.py    82         0          0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    83         0          0             0      0           0              # FROM candidates AS c
./myapp.py    84         0          0             0      0           0              # LEFT OUTER JOIN
./myapp.py    85         0          0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    86         0          0             0      0           0              #   FROM votes
./myapp.py    87         0          0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    88         0          0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    89         0          0             0      0           0              # ORDER BY v.count DESC
./myapp.py    90         0          0             0      0           0              # """)
./myapp.py    91         0        2.0         0.644    292         188                  result = []
./myapp.py    92      0.71     13.484         1.309   9052       11845                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    93    16.133    106.867        26.022   8760      227954                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    94     0.767     12.933         1.653   8760       14481                      result.append(data)
./myapp.py    95         0          0             0      0           0
./myapp.py    96     0.367      434.0         2.989   9052       27052                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py    97         0        7.0         0.671    292         196                  return result
./myapp.py   100         0          0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   101         0          0             0      0           0              #     cur = db().cursor()
./myapp.py   102         0          0             0      0           0              #     cur.execute("""
./myapp.py   103         0          0             0      0           0              # SELECT keyword
./myapp.py   104         0          0             0      0           0              # FROM votes
./myapp.py   105         0          0             0      0           0              # WHERE candidate_id = %s
./myapp.py   106         0          0             0      0           0              # GROUP BY keyword
./myapp.py   107         0          0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   108         0          0             0      0           0              # LIMIT 10
./myapp.py   109         0          0             0      0           0              # """, (candidate_id,))
./myapp.py   110         0          0             0      0           0              #     records = cur.fetchall()
./myapp.py   111         0          0             0      0           0
./myapp.py   112         0          0             0      0           0                  """
./myapp.py   113         0          0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   114         0          0             0      0           0                  """
./myapp.py   115     609.0    30026.0     18930.801    146     2763897  **              keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   116         0     1762.0        32.373   1709       55326                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   117         0          0             0      0           0                  # print(result)
./myapp.py   118         0          0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   119         0        1.0         0.527    146          77                  return result
./myapp.py   120         0          0             0      0           0
./myapp.py   121         0          0             0      0           0
./myapp.py   122         0          0             0      0           0              def get_voice_of_supporter(candidate_ids):
./myapp.py   123     0.667       73.0         3.571    700        2500                  candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   124         0          0             0      0           0              #
./myapp.py   125         0          0             0      0           0              #     cur = db().cursor()
./myapp.py   126         0          0             0      0           0              #     cur.execute("""
./myapp.py   127         0          0             0      0           0              # SELECT keyword
./myapp.py   128         0          0             0      0           0              # FROM votes
./myapp.py   129         0          0             0      0           0              # WHERE candidate_id IN ({})
./myapp.py   130         0          0             0      0           0              # GROUP BY keyword
./myapp.py   131         0          0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   132         0          0             0      0           0              # LIMIT 10
./myapp.py   133         0          0             0      0           0              # """.format(candidate_ids_str))
./myapp.py   134         0          0             0      0           0              #     records = cur.fetchall()
./myapp.py   135         0          0             0      0           0
./myapp.py   136      30.0      115.0        46.243     74        3422                  total_keywords = Counter()
./myapp.py   137     0.625      3.286         1.054    626         660                  for candidate_id in candidate_ids:
./myapp.py   138  1357.833  21760.667     16453.663    552     9082422  ******              total_keywords += Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   139         0          0             0      0           0
./myapp.py   140     0.909    10171.0         52.28    888       46425                  return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   141         0          0             0      0           0
./myapp.py   142         0          0             0      0           0
./myapp.py   143         0          0             0      0           0              get_all_party_name():
./myapp.py   144       2.0        5.0         2.528    218         551              return list(constants.PARTY_MASTER.keys())
./myapp.py   147         0          0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   148     0.111      4.857         1.095    698         764                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   151         0          0             0      0           0              def db_initialize():
./myapp.py   152     114.0      114.0         114.0      1         114                  cur = db().cursor()
./myapp.py   153    5868.0     5868.0        5868.0      1        5868                  cur.execute('DELETE FROM votes')
./myapp.py   156         0          0             0      0           0              @app.route('/')
./myapp.py   157         0          0             0      0           0              def get_index():
./myapp.py   158       1.0       15.0         1.748    218         381                  candidates = []
./myapp.py   159     691.0     3555.0      1084.294    218      236376                  election_results = get_election_results()
./myapp.py   160         0          0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   161       1.0        8.0         2.197    218         479                  candidates += election_results[:10]
./myapp.py   162         0       11.0         1.225    218         267                  candidates.append(election_results[-1])
./myapp.py   163         0          0             0      0           0
./myapp.py   164       4.0       41.0         6.128    218        1336                  parties_name = get_all_party_name()
./myapp.py   165         0        2.0         1.009    218         220                  parties = {}
./myapp.py   166       0.4        4.2         0.843   1090         919                  for name in parties_name:
./myapp.py   167       0.5       19.0         1.014    872         884                      parties[name] = 0
./myapp.py   168     0.548      2.097         0.775   6758        5236                  for r in election_results:
./myapp.py   169     0.767     12.133           1.2   6540        7845                      parties[r['political_party']] += r['count'] or 0
./myapp.py   170      0.25       68.0          3.95   1090        4305                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   171         0          0             0      0           0
./myapp.py   172       1.0       15.0         1.317    218         287                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   173     0.419      2.194         0.935   6758        6317                  for r in election_results:
./myapp.py   174     0.533      2.333         1.032   6540        6752                      if r['sex'] == '男':
./myapp.py   175     0.583      4.667         1.152   2616        3013                          sex_ratio['men'] += r['count'] or 0
./myapp.py   176     0.278      3.444         0.975   3924        3825                      elif r['sex'] == '女':
./myapp.py   177     0.444      3.333         1.151   3924        4517                          sex_ratio['women'] += r['count'] or 0
./myapp.py   178         0          0             0      0           0
./myapp.py   179         0        9.0         1.156    218         252                  return render_template('index.html',
./myapp.py   180         0        9.0         0.904    218         197                                         candidates=candidates,
./myapp.py   181         0       34.0         1.128    218         246                                         parties=parties,
./myapp.py   182    2247.0    70150.0      2812.482    218      613121                                         sex_ratio=sex_ratio)
./myapp.py   185         0          0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   186         0          0             0      0           0              def get_candidate(candidate_id):
./myapp.py   187     101.0      394.0       114.836    146       16766                  cur = db().cursor()
./myapp.py   188       3.0        7.0         4.418    146         645                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   189         0        1.0         0.719    146         105                  if not candidate:
./myapp.py   190         0          0             0      0           0                      return redirect('/')
./myapp.py   191         0          0             0      0           0
./myapp.py   192         0          0             0      0           0                  #cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   193      32.0       87.0        39.541    146        5773                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   194     683.0    30362.0     19276.137    146     2814316  **              keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   195         0        1.0         0.767    146         112                  return render_template('candidate.html',
./myapp.py   196         0        1.0         0.589    146          86                                         candidate=candidate,
./myapp.py   197         0        1.0          0.61    146          89                                         votes=votes,
./myapp.py   198     502.0    25764.0       790.644    146      115434                                         keywords=keywords)
./myapp.py   201         0          0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   202         0          0             0      0           0              def get_political_party(name):
./myapp.py   203       1.0        3.0         1.541     74         114                  votes = 0
./myapp.py   204     25.29      94.29        38.697   2294       88772                  for r in get_election_results():
./myapp.py   205     0.467        2.1         0.907   2220        2013                      if r['political_party'] == name:
./myapp.py   206     0.429        3.0         0.975    552         538                          votes += r['count'] or 0
./myapp.py   207         0          0             0      0           0
./myapp.py   208         0          0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   209         0          0             0      0           0
./myapp.py   210       1.0       11.0           2.5     74         185                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   211     2.111      325.0         8.563    700        5994                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   212    9121.0   192760.0    123328.865     74     9126336  ******          keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   213         0        3.0         0.905     74          67                  return render_template('political_party.html',
./myapp.py   214         0        1.0         0.757     74          56                                         political_party=name,
./myapp.py   215         0        1.0         0.784     74          58                                         votes=votes,
./myapp.py   216         0        1.0         0.743     74          55                                         candidates=candidates,
./myapp.py   217     714.0    90950.0      2017.108     74      149266                                         keywords=keywords)
./myapp.py   218         0          0             0      0           0
./myapp.py   219         0          0             0      0           0
./myapp.py   220         0          0             0      0           0              .route('/vote')
./myapp.py   221         0          0             0      0           0              get_vote():
./myapp.py   222         0          0             0      0           0              return constants.VOTE_HTML
./myapp.py   225         0          0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   226         0          0             0      0           0              def post_vote():
./myapp.py   227      99.0   380099.0       197.886   4907      971026  *               cur = db().cursor()
./myapp.py   228     100.0     1396.0       124.354   4907      610206                  raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   229         0          0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   230       1.0      196.0         3.683  39256      144561                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   231         0       97.0         1.074   4907        5272                  cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', (
./myapp.py   232     579.0    15696.0      2914.727   4907    14302566  !*********          form_base['mynumber'], form_base['name'], form_base['address']
./myapp.py   233         0          0             0      0           0                  ))
./myapp.py   234      10.0      167.0        13.298   4907       65253                  user = cur.fetchone()
./myapp.py   235       4.0      127.0         5.176   4907       25397                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   236         0       33.0         0.777   4907        3815                  voted_count = 0
./myapp.py   237         0       20.0         0.797   4907        3909                  if user:
./myapp.py   238      17.0      176.0        31.905   3954      126154                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   239         0          0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   240         0          0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   241         0          0             0      0           0                      # if not voted_count:
./myapp.py   242         0          0             0      0           0                      #     voted_count = 0
./myapp.py   243         0       21.0         0.859   4907        4217                  if not user:
./myapp.py   244         0        2.0         0.948    953         903                      return constants.VOTE_FAIL1_HTML
./myapp.py   245       1.0       22.0         2.656   3954       10500                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   246       1.0        1.0           1.0      1           1                      return constants.VOTE_FAIL2_HTML
./myapp.py   247         0       15.0         0.878   3953        3471                  elif not form_base['candidate']:
./myapp.py   248       1.0        1.0           1.0      1           1                      return constants.VOTE_FAIL3_HTML
./myapp.py   249         0       11.0         0.738   3952        2915                  elif not candidate_id:
./myapp.py   250       1.0        1.0           1.0      1           1                      return constants.VOTE_FAIL4_HTML
./myapp.py   251         0       11.0          0.84   3951        3320                  elif not form_base['keyword']:
./myapp.py   252       1.0        1.0           1.0      1           1                      return constants.VOTE_FAIL5_HTML
./myapp.py   253         0          0             0      0           0
./myapp.py   254       1.0        4.0         1.057   3950        4177                  vote_count = int(form_base['vote_count'])
./myapp.py   255         0        5.0         1.025   3950        4049                  data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   256         0          0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   257      29.0     3345.0       102.591   3950      405233                  set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   258     296.0   181183.0      1036.894   3950     4095730  ***             set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   259      28.0     8734.0       346.158   3950     1367324  *               set_voted_count_cache(user['id'], vote_count)
./myapp.py   260       1.0        4.0         1.903   3950        7517                  return constants.VOTE_SUCCESS_HTML
./myapp.py   261         0          0             0      0           0
./myapp.py   262         0          0             0      0           0
./myapp.py   263         0          0             0      0           0              @app.route('/initialize')
./myapp.py   264         0          0             0      0           0              def get_initialize():
./myapp.py   265    5989.0     5989.0        5989.0      1        5989                  db_initialize()
./myapp.py   266     491.0      491.0         491.0      1         491                  r.flushdb()
./myapp.py   267         0          0             0      1           0                  return ''
./myapp.py   270         0          0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   271       1.0      120.0         1.724   4907        8460                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   274         0          0             0      0           0              def set_cache(key, val):
./myapp.py   275       1.0      967.5         8.405   7900       66397                  if not uwsgi.cache_exists(key):
./myapp.py   276       4.0     8686.0        294.59   3978     1171880  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   277         0          0             0      0           0                  else:
./myapp.py   278       4.0     3299.0        54.474   3922      213646                      uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   281         0          0             0      0           0              def get_cache(key, default=None):
./myapp.py   282         0     34.667          0.58  20760       12031                  try:
./myapp.py   283     2.267      793.0        12.031  20760      249756                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   284         0      207.0         1.044   8573        8946                  except:
./myapp.py   285         0       25.5         1.204   8573       10319                      return default
./myapp.py   288         0          0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   289       2.0      116.0         2.633   3950       10401                  key_name = 'voted_{}'.format(user_id)
./myapp.py   290      21.0     8726.0       337.395   3950     1332712  *               set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   293         0          0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   294       2.0       29.0         2.539   3954       10040                  key_name = 'voted_{}'.format(user_id)
./myapp.py   295      11.0      133.0         24.55   3954       97071                  return get_cache(key_name, 0)
./myapp.py   298         0          0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   299         0       30.0         0.784   3950        3095                  key_name = md5('cv_{}'.format(
./myapp.py   300       1.0       82.0         2.026   3950        8004                      candidate_id,
./myapp.py   301       4.0       33.0         5.293   3950       20907                  ).encode('utf-8')).hexdigest()
./myapp.py   302      16.0     3330.0        86.876   3950      343159                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   305         0          0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   306         0      2.867         0.684   8906        6091                  key_name = md5('cv_{}'.format(
./myapp.py   307     1.033        6.0         1.503   8906       13382                      candidate_id,
./myapp.py   308     1.667     14.333         2.645   8906       23559                  ).encode('utf-8')).hexdigest()
./myapp.py   309     8.067     92.667        14.849   8906      132242                  return get_cache(key_name, 0)
./myapp.py   312         0          0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   313         0       18.0          0.83   3950        3278                  key_name = 'ckv_{}_{}'.format(
./myapp.py   314       1.0       33.0         2.266   3950        8950                      candidate_id, keyword
./myapp.py   315         0          0             0      0           0                  )
./myapp.py   316     288.0   181172.0      1025.486   3950     4050668  ***             r.incr(key_name, vote_count)
./myapp.py   319         0          0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   320       2.0       20.0         3.143    698        2194                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   321         0        2.0         0.861    697         600                  result = {}
./myapp.py   322     14.88      811.0        48.961  13940      682522                  for key in r.keys(key_name):
./myapp.py   323     2.958       11.4         3.633  13243       48108                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   324    215.66   1321.684       826.326  13243    10943040  ********            result[keyword] = int(r.get(key))
./myapp.py   325         0          0             0      0           0
./myapp.py   326         0        1.0          0.56    697         390                  return result
./myapp.py   360         0          0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   361         0          0             0      0           0              def unquote_cached(keyword):
./myapp.py   362     122.0     1490.0        630.75     24       15138                  return unquote_plus(keyword)
