 file_name  line  min_time  max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  --------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    68         0         0             0      0           0              def db():
./myapp.py    69      25.0     100.0         27.25   4019      109516                  if hasattr(request, 'db'):
./myapp.py    70         0         0             0      0           0                      return request.db
./myapp.py    71         0         0             0      0           0                  else:
./myapp.py    72      22.0      72.0        23.413   4019       94095                      request.db = DB_POOL.pop()
./myapp.py    73      21.0      67.0        22.263   4019       89473                      return request.db
./myapp.py    76         0         0             0      0           0              @app.teardown_request
./myapp.py    77         0         0             0      0           0              def teardown(exception=None):
./myapp.py    78      25.0     102.0        26.966   4022      108458                  if hasattr(request, 'db'):
./myapp.py    79      22.0      59.0        23.285   4018       93561                      DB_POOL.append(request.db)
./myapp.py    80      21.0     627.0        22.352   4018       89810                      delattr(request, 'db')
./myapp.py    83         0         0             0      0           0              def get_election_results():
./myapp.py    84         0         0             0      0           0              #     cur = db().cursor()
./myapp.py    85         0         0             0      0           0              #     cur.execute("""
./myapp.py    86         0         0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    87         0         0             0      0           0              # FROM candidates AS c
./myapp.py    88         0         0             0      0           0              # LEFT OUTER JOIN
./myapp.py    89         0         0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    90         0         0             0      0           0              #   FROM votes
./myapp.py    91         0         0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    92         0         0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    93         0         0             0      0           0              # ORDER BY v.count DESC
./myapp.py    94         0         0             0      0           0              # """)
./myapp.py    95         0       1.0           0.5      2           1                  result = []
./myapp.py    96     1.065     1.226         1.145     62          71                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    97      22.8    23.733        23.267     60        1396                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    98     1.433       1.5         1.467     60          88                      result.append(data)
./myapp.py    99         0         0             0      0           0
./myapp.py   100     0.533      59.0         2.419     62         150                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py   101         0         0             0      2           0                  return result
./myapp.py   104         0         0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   105         0         0             0      0           0              #     cur = db().cursor()
./myapp.py   106         0         0             0      0           0              #     cur.execute("""
./myapp.py   107         0         0             0      0           0              # SELECT keyword
./myapp.py   108         0         0             0      0           0              # FROM votes
./myapp.py   109         0         0             0      0           0              # WHERE candidate_id = %s
./myapp.py   110         0         0             0      0           0              # GROUP BY keyword
./myapp.py   111         0         0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   112         0         0             0      0           0              # LIMIT 10
./myapp.py   113         0         0             0      0           0              # """, (candidate_id,))
./myapp.py   114         0         0             0      0           0              #     records = cur.fetchall()
./myapp.py   115         0         0             0      0           0
./myapp.py   116         0         0             0      0           0                  """
./myapp.py   117         0         0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   118         0         0             0      0           0                  """
./myapp.py   119    2903.0    3281.0        3092.0      2        6184                  keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   120   379.273    7672.0       986.667     24       23680                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   121         0         0             0      0           0                  # print(result)
./myapp.py   122         0         0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   123         0       1.0           0.5      2           1                  return result
./myapp.py   124         0         0             0      0           0
./myapp.py   125         0         0             0      0           0
./myapp.py   126         0         0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   127     0.857      13.0         2.375      8          19              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   128         0         0             0      0           0
./myapp.py   129         0         0             0      0           0                cur = db().cursor()
./myapp.py   130         0         0             0      0           0                cur.execute("""
./myapp.py   131         0         0             0      0           0              LECT keyword
./myapp.py   132         0         0             0      0           0              OM votes
./myapp.py   133         0         0             0      0           0              ERE candidate_id IN ({})
./myapp.py   134         0         0             0      0           0              OUP BY keyword
./myapp.py   135         0         0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   136         0         0             0      0           0              MIT 10
./myapp.py   137         0         0             0      0           0              ".format(candidate_ids_str))
./myapp.py   138         0         0             0      0           0                records = cur.fetchall()
./myapp.py   139         0         0             0      0           0
./myapp.py   140      29.0      29.0          29.0      1          29              total_keywords = Counter()
./myapp.py   141       1.0       1.0           1.0      7           7              for candidate_id in candidate_ids:
./myapp.py   142    1272.5    1272.5        1272.5      6        7635                  total_keywords.update(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   143         0         0             0      0           0
./myapp.py   144    30.545     481.0        68.083     12         817              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   145         0         0             0      0           0
./myapp.py   146         0         0             0      0           0
./myapp.py   147         0         0             0      0           0              def get_all_party_name():
./myapp.py   148       4.0       4.0           4.0      1           4                  return list(constants.PARTY_MASTER.keys())
./myapp.py   151         0         0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   152     0.833       2.0           1.0      8           8                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   155         0         0             0      0           0              def db_initialize():
./myapp.py   156     120.0     120.0         120.0      1         120                  cur = db().cursor()
./myapp.py   157     454.0     454.0         454.0      1         454                  cur.execute('DELETE FROM votes')
./myapp.py   160         0         0             0      0           0              @app.route('/')
./myapp.py   161         0         0             0      0           0              def get_index():
./myapp.py   162       1.0       1.0           1.0      1           1                  candidates = []
./myapp.py   163    1001.0    1001.0        1001.0      1        1001                  election_results = get_election_results()
./myapp.py   164         0         0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   165       2.0       2.0           2.0      1           2                  candidates += election_results[:10]
./myapp.py   166       1.0       1.0           1.0      1           1                  candidates.append(election_results[-1])
./myapp.py   167         0         0             0      0           0
./myapp.py   168     805.0     805.0         805.0      1         805                  parties_name = get_all_party_name()
./myapp.py   169       1.0       1.0           1.0      1           1                  parties = {}
./myapp.py   170       0.8       0.8           0.8      5           4                  for name in parties_name:
./myapp.py   171       1.0       1.0           1.0      4           4                      parties[name] = 0
./myapp.py   172      0.71      0.71          0.71     31          22                  for r in election_results:
./myapp.py   173     0.967     0.967         0.967     30          29                      parties[r['political_party']] += r['count'] or 0
./myapp.py   174       0.5      14.0           3.2      5          16                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   175         0         0             0      0           0
./myapp.py   176       1.0       1.0           1.0      1           1                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   177     0.581     0.581         0.581     31          18                  for r in election_results:
./myapp.py   178     0.833     0.833         0.833     30          25                      if r['sex'] == '男':
./myapp.py   179     0.833     0.833         0.833     12          10                          sex_ratio['men'] += r['count'] or 0
./myapp.py   180     0.944     0.944         0.944     18          17                      elif r['sex'] == '女':
./myapp.py   181     0.667     0.667         0.667     18          12                          sex_ratio['women'] += r['count'] or 0
./myapp.py   182      22.0      22.0          22.0      1          22                  cached_html = get_index_page_cache()
./myapp.py   183       1.0       1.0           1.0      1           1                  if cached_html:
./myapp.py   184         0         0             0      0           0                      return cached_html
./myapp.py   185         0         0             0      0           0
./myapp.py   186       1.0       1.0           1.0      1           1                  html = render_template('index.html',
./myapp.py   187       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   188       1.0       1.0           1.0      1           1                                         parties=parties,
./myapp.py   189  155309.0  155309.0      155309.0      1      155309                                         sex_ratio=sex_ratio)
./myapp.py   190         0         0             0      0           0
./myapp.py   191      61.0      61.0          61.0      1          61                  set_index_page_cache(html)
./myapp.py   192       1.0       1.0           1.0      1           1                  return html
./myapp.py   194         0         0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   195         0         0             0      0           0              def get_candidate(candidate_id):
./myapp.py   196       5.0       8.0           6.5      2          13                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   197       1.0       1.0           1.0      2           2                  if not candidate:
./myapp.py   198         0         0             0      0           0                      return redirect('/')
./myapp.py   199         0         0             0      0           0                  # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   200      26.0      39.0          32.5      2          65                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   201    7222.0   10964.0        9093.0      2       18186                  keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   202       1.0       1.0           1.0      2           2                  return render_template('candidate.html',
./myapp.py   203         0       1.0           0.5      2           1                                         candidate=candidate,
./myapp.py   204         0       1.0           0.5      2           1                                         votes=votes,
./myapp.py   205     653.0   25880.0       13266.5      2       26533                                         keywords=keywords)
./myapp.py   208         0         0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   209         0         0             0      0           0              def get_political_party(name):
./myapp.py   210       1.0       1.0           1.0      1           1                  votes = 0
./myapp.py   211    32.065    32.065        32.065     31         994                  for r in get_election_results():
./myapp.py   212     0.733     0.733         0.733     30          22                      if r['political_party'] == name:
./myapp.py   213     0.667     0.667         0.667      6           4                          votes += r['count'] or 0
./myapp.py   214         0         0             0      0           0
./myapp.py   215         0         0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   216         0         0             0      0           0
./myapp.py   217       2.0       2.0           2.0      1           2                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   218     2.714      24.0         5.375      8          43                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   219    8196.0    8196.0        8196.0      1        8196                  keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   220       1.0       1.0           1.0      1           1                  return render_template('political_party.html',
./myapp.py   221       1.0       1.0           1.0      1           1                                         political_party=name,
./myapp.py   222       1.0       1.0           1.0      1           1                                         votes=votes,
./myapp.py   223       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   224   28368.0   28368.0       28368.0      1       28368                                         keywords=keywords)
./myapp.py   225         0         0             0      0           0
./myapp.py   226         0         0             0      0           0
./myapp.py   227         0         0             0      0           0              .route('/vote')
./myapp.py   228         0         0             0      0           0              get_vote():
./myapp.py   229         0         0             0      0           0              return constants.VOTE_HTML
./myapp.py   232         0         0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   233         0         0             0      0           0              def post_vote():
./myapp.py   234     102.0     709.0       108.299   4018      435146  *               cur = db().cursor()
./myapp.py   235      99.0    2247.0       125.663   4018      504914  *               raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   236         0         0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   237       1.0     101.0         3.754  32144      120675                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   238       1.0      19.0         1.348   4018        5417                  data = (form_base['mynumber'], form_base['name'], form_base['address'])
./myapp.py   239       2.0  153668.0      1175.976   4018     4725072  *********       user_cache = get_user_cache(*data)
./myapp.py   240         0      24.0         1.001   4018        4024                  if not user_cache:
./myapp.py   241     493.0    8745.0       2034.76   2658     5408391  !*********          cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', data)
./myapp.py   242      10.0      57.0        13.337   2658       35449                      user = cur.fetchone()
./myapp.py   243         0         0             0      0           0                  else:
./myapp.py   244         0      21.0         0.917   1360        1247                      user = user_cache
./myapp.py   245       4.0      51.0         5.558   4018       22331                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   246         0      21.0         0.821   4018        3299                  voted_count = 0
./myapp.py   247         0      22.0         0.841   4018        3381                  if user:
./myapp.py   248      19.0     812.0        35.147   3244      114017                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   249         0         0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   250         0         0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   251         0         0             0      0           0                      # if not voted_count:
./myapp.py   252         0         0             0      0           0                      #     voted_count = 0
./myapp.py   253         0      47.0         0.918   4018        3687                  if not user:
./myapp.py   254         0      20.0         0.908    774         703                      return constants.VOTE_FAIL1_HTML
./myapp.py   255       2.0      54.0         3.023   3244        9807                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   256       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL2_HTML
./myapp.py   257         0      20.0         0.961   3243        3117                  elif not form_base['candidate']:
./myapp.py   258       2.0       2.0           2.0      1           2                      return constants.VOTE_FAIL3_HTML
./myapp.py   259         0      25.0         0.836   3242        2710                  elif not candidate_id:
./myapp.py   260       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL4_HTML
./myapp.py   261         0       9.0          0.91   3241        2949                  elif not form_base['keyword']:
./myapp.py   262       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL5_HTML
./myapp.py   263         0         0             0      0           0
./myapp.py   264       1.0      20.0         1.176   3240        3810                  vote_count = int(form_base['vote_count'])
./myapp.py   265         0         0             0      0           0                  #data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   266         0         0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   267      28.0    2993.0        69.882   3240      226417                  set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   268     274.0    5197.0       884.949   3240     2867235  *****           set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   269      28.0    4274.0       264.133   3240      855792  **              set_voted_count_cache(user['id'], vote_count)
./myapp.py   270         0         0             0      0           0
./myapp.py   271       9.0    3084.0       266.601   3240      863786  **              clear_index_page_cache()
./myapp.py   272       1.0      25.0         2.094   3240        6786                  return constants.VOTE_SUCCESS_HTML
./myapp.py   273         0         0             0      0           0
./myapp.py   274         0         0             0      0           0
./myapp.py   275         0         0             0      0           0              @app.route('/initialize')
./myapp.py   276         0         0             0      0           0              def get_initialize():
./myapp.py   277     580.0     580.0         580.0      1         580                  db_initialize()
./myapp.py   278   16715.0   16715.0       16715.0      1       16715                  r.flushdb()
./myapp.py   279       1.0       1.0           1.0      1           1                  return ''
./myapp.py   282         0         0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   283       1.0      20.0         1.753   4018        7043                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   286         0         0             0      0           0              def set_cache(key, val):
./myapp.py   287       1.0   664.333         7.958   9721       77361                  if not uwsgi.cache_exists(key):
./myapp.py   288       4.0    4224.0       215.307   3269      703838  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   289         0         0             0      0           0                  else:
./myapp.py   290       2.0    1858.0        134.24   6452      866115  **                  uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   293         0         0             0      0           0              def get_cache(key, default=None):
./myapp.py   294         0     8.667         0.559   9787        5468                  try:
./myapp.py   295     4.667   703.333        13.997   9787      136984                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   296         0      21.5         1.037   6512        6751                  except:
./myapp.py   297     0.333       9.0         1.244   6512        8101                      return default
./myapp.py   300         0         0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   301       2.0      16.0         2.643   3240        8564                  key_name = 'voted_{}'.format(user_id)
./myapp.py   302      21.0    4266.0       255.769   3240      828690  **              set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   305         0         0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   306       2.0      27.0         2.615   3244        8482                  key_name = 'voted_{}'.format(user_id)
./myapp.py   307      13.0     793.0         26.98   3244       87524                  return get_cache(key_name, 0)
./myapp.py   310         0         0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   311         0      12.0         0.881   3240        2856                  key_name = md5('cv_{}'.format(
./myapp.py   312       1.0      22.0         1.825   3240        5914                      candidate_id,
./myapp.py   313       4.0      26.0         4.825   3240       15632                  ).encode('utf-8')).hexdigest()
./myapp.py   314      16.0    2977.0        53.393   3240      172994                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   317         0         0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   318       0.7       1.0          0.71     62          44                  key_name = md5('cv_{}'.format(
./myapp.py   319       1.3       5.0         1.468     62          91                      candidate_id,
./myapp.py   320     2.333       8.0         2.484     62         154                  ).encode('utf-8')).hexdigest()
./myapp.py   321      11.0      17.0        12.871     62         798                  return get_cache(key_name, 0)
./myapp.py   324         0         0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   325         0     116.0         0.907   3240        2940                  key_name = 'ckv_{}_{}'.format(
./myapp.py   326       1.0      45.0         2.277   3240        7378                      candidate_id, keyword
./myapp.py   327         0         0             0      0           0                  )
./myapp.py   328     266.0    5188.0       874.442   3240     2833193  *****           r.incr(key_name, vote_count)
./myapp.py   331         0         0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   332       1.0     2.333         2.125      8          17                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   333         0       1.0         0.375      8           3                  result = {}
./myapp.py   334    27.333     88.12        60.347     49        2957                  for key in r.keys(key_name):
./myapp.py   335     3.182     4.105         3.659     41         150                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   336   221.273   258.579       239.561     41        9822                      result[keyword] = int(r.get(key))
./myapp.py   337         0         0             0      0           0
./myapp.py   338     0.833       1.0         0.875      8           7                  return result
./myapp.py   341         0         0             0      0           0              def set_index_page_cache(html):
./myapp.py   342      56.0      56.0          56.0      1          56                  set_cache('index', html)
./myapp.py   345         0         0             0      0           0              def get_index_page_cache():
./myapp.py   346      18.0      18.0          18.0      1          18                  return get_cache('index', None)
./myapp.py   349         0         0             0      0           0              def clear_index_page_cache():
./myapp.py   350       6.0    3077.0       261.505   3240      847276  **              set_cache('index', None)
./myapp.py   357         0         0             0      0           0              @lru_cache(maxsize=1000)
./myapp.py   358         0         0             0      0           0              def get_user_cache(mynumber, name, address):
./myapp.py   359         0       9.0          0.77   4014        3089                  key_name = md5('{}{}{}'.format(
./myapp.py   360       2.0      23.0         2.344   4014        9409                      mynumber, name, address
./myapp.py   361       4.0      36.0         4.905   4014       19689                  ).encode('utf-8')).hexdigest()
./myapp.py   362     266.0  150714.0       848.558   4014     3406112  ******          if r2.exists(key_name):
./myapp.py   363     242.0    3854.0       912.299   1356     1237077  **                  return pickle.loads(r2.get(key_name))
./myapp.py   364         0      16.0          0.65   2658        1728                  return None
./myapp.py   367         0         0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   368         0         0             0      0           0              def unquote_cached(keyword):
./myapp.py   369     160.5     830.0       703.882     17       11966                  return unquote_plus(keyword)
