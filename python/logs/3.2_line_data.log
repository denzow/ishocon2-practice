 file_name  line  avg_per_time   hits  total_time       graph                                                                                                         code
----------  ----  ------------  -----  ----------  ----------  -----------------------------------------------------------------------------------------------------------
./myapp.py    55             0      0           0              def db():
./myapp.py    56        28.821   6851      197455                  if hasattr(request, 'db'):
./myapp.py    57         26.09   1181       30812                      return request.db
./myapp.py    58             0      0           0                  else:
./myapp.py    59        24.699   5670      140042                      request.db = DB_POOL.pop()
./myapp.py    60          23.0   5670      130412                      return request.db
./myapp.py    63             0      0           0              @app.teardown_request
./myapp.py    64             0      0           0              def teardown(exception=None):
./myapp.py    65        27.715   5669      157119                  if hasattr(request, 'db'):
./myapp.py    66        22.465   5669      127355                      DB_POOL.append(request.db)
./myapp.py    67        23.389   5669      132594                      delattr(request, 'db')
./myapp.py    70             0      0           0              def get_election_results():
./myapp.py    71       119.924    674       80829                  cur = db().cursor()
./myapp.py    72         1.211    674         816                  cur.execute("""
./myapp.py    73             0      0           0              SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    74             0      0           0              FROM candidates AS c
./myapp.py    75             0      0           0              LEFT OUTER JOIN
./myapp.py    76             0      0           0                (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    77             0      0           0                FROM votes
./myapp.py    78             0      0           0                GROUP BY candidate_id) AS v
./myapp.py    79             0      0           0              ON c.id = v.candidate_id
./myapp.py    80             0      0           0              ORDER BY v.count DESC
./myapp.py    81       5361.73    674     3613806  **          """)
./myapp.py    82        14.288    674        9630                  return cur.fetchall()
./myapp.py    85             0      0           0              def get_voice_of_supporter(candidate_ids):
./myapp.py    86        87.905    507       44568                  cur = db().cursor()
./myapp.py    87         3.019   2587        7811                  candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py    88         0.895    507         454                  cur.execute("""
./myapp.py    89             0      0           0              SELECT keyword
./myapp.py    90             0      0           0              FROM votes
./myapp.py    91             0      0           0              WHERE candidate_id IN ({})
./myapp.py    92             0      0           0              GROUP BY keyword
./myapp.py    93             0      0           0              ORDER BY sum(vote_count) DESC
./myapp.py    94             0      0           0              LIMIT 10
./myapp.py    95      7529.842    507     3817630  **          """.format(candidate_ids_str))
./myapp.py    96        13.221    507        6703                  records = cur.fetchall()
./myapp.py    97         2.021   5891       11905                  return [r['keyword'] for r in records]
./myapp.py    98             0      0           0
./myapp.py    99             0      0           0
./myapp.py   100             0      0           0              def get_all_party_name():
./myapp.py   101        90.549    505       45727                  cur = db().cursor()
./myapp.py   102       720.311    505      363757                  cur.execute('SELECT political_party FROM candidates GROUP BY political_party')
./myapp.py   103        14.521    505        7333                  records = cur.fetchall()
./myapp.py   104         2.423   3030        7343                  return [r['political_party'] for r in records]
./myapp.py   105             0      0           0
./myapp.py   106             0      0           0
./myapp.py   107             0      0           0              get_candidate_by_id(candidate_id):
./myapp.py   108             0      0           0              cur = db().cursor()
./myapp.py   109             0      0           0              cur.execute('SELECT * FROM candidates WHERE id = {}'.format(candidate_id))
./myapp.py   110             0      0           0              return cur.fetchone()
./myapp.py   113             0      0           0              def db_initialize():
./myapp.py   114         124.0      1         124                  cur = db().cursor()
./myapp.py   115         405.0      1         405                  cur.execute('DELETE FROM votes')
./myapp.py   118             0      0           0              @app.route('/')
./myapp.py   119             0      0           0              def get_index():
./myapp.py   120         1.628    505         822                  candidates = []
./myapp.py   121      5626.867    505     2841568  **              election_results = get_election_results()
./myapp.py   122             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   123         2.216    505        1119                  candidates += election_results[:10]
./myapp.py   124         1.477    505         746                  candidates.append(election_results[-1])
./myapp.py   125             0      0           0
./myapp.py   126       846.196    505      427329                  parties_name = get_all_party_name()
./myapp.py   127         0.988    505         499                  parties = {}
./myapp.py   128         0.859   2525        2170                  for name in parties_name:
./myapp.py   129         0.877   2020        1772                      parties[name] = 0
./myapp.py   130         0.736  15655       11515                  for r in election_results:
./myapp.py   131         1.199  15150       18161                      parties[r['political_party']] += r['count'] or 0
./myapp.py   132         3.699   2525        9339                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   133             0      0           0
./myapp.py   134         1.095    505         553                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   135         0.756  15655       11837                  for r in election_results:
./myapp.py   136         0.813  15150       12315                      if r['sex'] == '男':
./myapp.py   137         0.984   6060        5966                          sex_ratio['men'] += r['count'] or 0
./myapp.py   138         0.817   9090        7431                      elif r['sex'] == '女':
./myapp.py   139         0.965   9090        8769                          sex_ratio['women'] += r['count'] or 0
./myapp.py   140             0      0           0
./myapp.py   141          0.84    505         424                  return render_template('index.html',
./myapp.py   142         0.691    505         349                                         candidates=candidates,
./myapp.py   143         0.745    505         376                                         parties=parties,
./myapp.py   144      2643.315    505     1334874  *                                      sex_ratio=sex_ratio)
./myapp.py   147             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   148             0      0           0              def get_candidate(candidate_id):
./myapp.py   149        120.21    338       40631                  cur = db().cursor()
./myapp.py   150      1322.012    338      446840                  cur.execute('SELECT * FROM candidates WHERE id = {}'.format(candidate_id))
./myapp.py   151        18.737    338        6333                  candidate = cur.fetchone()
./myapp.py   152         0.953    338         322                  if not candidate:
./myapp.py   153             0      0           0                      return redirect('/')
./myapp.py   154             0      0           0
./myapp.py   155      2095.222    338      708185                  cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   156        13.873    338        4689                  votes = cur.fetchone()['count']
./myapp.py   157      5331.118    338     1801918  *               keywords = get_voice_of_supporter([candidate_id])
./myapp.py   158         0.796    338         269                  return render_template('candidate.html',
./myapp.py   159         0.757    338         256                                         candidate=candidate,
./myapp.py   160         0.553    338         187                                         votes=votes,
./myapp.py   161       710.402    338      240116                                         keywords=keywords)
./myapp.py   164             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   165             0      0           0              def get_political_party(name):
./myapp.py   166       152.379    169       25752                  cur = db().cursor()
./myapp.py   167         0.645    169         109                  votes = 0
./myapp.py   168        166.73   5239      873500  *               for r in get_election_results():
./myapp.py   169         0.753   5070        3817                      if r['political_party'] == name:
./myapp.py   170         1.053   1235        1300                          votes += r['count'] or 0
./myapp.py   171             0      0           0
./myapp.py   172       830.805    169      140406                  cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   173        12.864    169        2174                  candidates = cur.fetchall()
./myapp.py   174         2.216   1573        3485                  candidate_ids = [c['id'] for c in candidates]
./myapp.py   175     12365.018    169     2089688  *               keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   176         0.888    169         150                  return render_template('political_party.html',
./myapp.py   177         0.722    169         122                                         political_party=name,
./myapp.py   178         0.692    169         117                                         votes=votes,
./myapp.py   179         0.663    169         112                                         candidates=candidates,
./myapp.py   180       924.515    169      156243                                         keywords=keywords)
./myapp.py   181             0      0           0
./myapp.py   182             0      0           0
./myapp.py   183             0      0           0              .route('/vote')
./myapp.py   184             0      0           0              get_vote():
./myapp.py   185             0      0           0              cur = db().cursor()
./myapp.py   186             0      0           0              cur.execute('SELECT * FROM candidates')
./myapp.py   187             0      0           0              candidates = cur.fetchall()
./myapp.py   188             0      0           0              return render_template('vote.html',
./myapp.py   189             0      0           0                                     candidates=candidates,
./myapp.py   190             0      0           0                                     message='')
./myapp.py   193             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   194             0      0           0              def post_vote():
./myapp.py   195       107.372   4657      500033                  cur = db().cursor()
./myapp.py   196        124.24   4657      578585                  raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   197             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   198         3.593  37256      133879                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   199          1.03   4657        4799                  cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', (
./myapp.py   200       3331.46   4657    15514608  !*********          form_base['mynumber'], form_base['name'], form_base['address']
./myapp.py   201             0      0           0                  ))
./myapp.py   202        13.783   4657       64187                  user = cur.fetchone()
./myapp.py   203         5.225   4657       24332                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   204         0.764   4657        3557                  voted_count = 0
./myapp.py   205         0.796   4657        3708                  if user:
./myapp.py   206             0      0           0                      #voted_count = get_voted_count_cache(user['id'])
./myapp.py   207      1074.938   3754     4035318  ***                 cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   208        13.457   3754       50519                      voted_count = cur.fetchone()['count']
./myapp.py   209         0.823   3754        3090                      if not voted_count:
./myapp.py   210         0.763   3749        2860                          voted_count = 0
./myapp.py   211          0.78   4657        3631                  if not user:
./myapp.py   212         0.991    903         895                      return constants.VOTE_FAIL1_HTML
./myapp.py   213         2.726   3754       10234                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   214           4.0      1           4                      return constants.VOTE_FAIL2_HTML
./myapp.py   215         0.943   3753        3538                  elif not form_base['candidate']:
./myapp.py   216           6.0      1           6                      return constants.VOTE_FAIL3_HTML
./myapp.py   217         0.758   3752        2843                  elif not candidate_id:
./myapp.py   218           5.0      1           5                      return constants.VOTE_FAIL4_HTML
./myapp.py   219         0.834   3751        3129                  elif not form_base['keyword']:
./myapp.py   220           5.0      1           5                      return constants.VOTE_FAIL5_HTML
./myapp.py   221             0      0           0
./myapp.py   222         0.871   3750        3267                  cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', (
./myapp.py   223      1900.055   3750     7125205  *****               user['id'], candidate_id, unquote_plus(form_base['keyword']), int(form_base['vote_count'])
./myapp.py   224             0      0           0                  ))
./myapp.py   225       261.398   3750      980242  *               set_voted_count_cache(user['id'], int(form_base['vote_count']))
./myapp.py   226         1.713   3750        6423                  return constants.VOTE_SUCCESS_HTML
./myapp.py   227             0      0           0
./myapp.py   228             0      0           0
./myapp.py   229             0      0           0              @app.route('/initialize')
./myapp.py   230             0      0           0              def get_initialize():
./myapp.py   231         535.0      1         535                  db_initialize()
./myapp.py   232           1.0      1           1                  return ''
./myapp.py   235             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   236         1.764   4657        8213                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   239             0      0           0              def set_cache(key, val):
./myapp.py   240         6.686   3750       25071                  if not uwsgi.cache_exists(key):
./myapp.py   241       212.346   3749      796084  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   242             0      0           0                  else:
./myapp.py   243          11.0      1          11                      uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   246             0      0           0              def get_cache(key, default=None):
./myapp.py   247         0.583   3750        2188                  try:
./myapp.py   248        14.154   3750       53076                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   249         1.001   3749        3754                  except:
./myapp.py   250         1.198   3749        4490                      return default
./myapp.py   258             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   259         2.802   3750       10509                  key_name = 'voted_{}'.format(user_id)
./myapp.py   260       250.723   3750      940212  *               set_cache(key_name, get_cache(key_name, 0) + voted_count)
