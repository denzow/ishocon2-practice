 file_name  line  min_time  max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  --------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    64         0         0             0      0           0              def db():
./myapp.py    65      25.0     172.0        28.568   5528      157925                  if hasattr(request, 'db'):
./myapp.py    66         0         0             0      0           0                      return request.db
./myapp.py    67         0         0             0      0           0                  else:
./myapp.py    68      22.0     167.0        24.143   5528      133465                      request.db = DB_POOL.pop()
./myapp.py    69      21.0     592.0        22.863   5528      126385                      return request.db
./myapp.py    72         0         0             0      0           0              @app.teardown_request
./myapp.py    73         0         0             0      0           0              def teardown(exception=None):
./myapp.py    74      25.0      98.0        26.683   5532      147609                  if hasattr(request, 'db'):
./myapp.py    75      21.0     714.0        23.014   5528      127219                      DB_POOL.append(request.db)
./myapp.py    76      21.0     711.0         22.17   5528      122554                      delattr(request, 'db')
./myapp.py    79         0         0             0      0           0              def get_election_results():
./myapp.py    80         0         0             0      0           0              #     cur = db().cursor()
./myapp.py    81         0         0             0      0           0              #     cur.execute("""
./myapp.py    82         0         0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    83         0         0             0      0           0              # FROM candidates AS c
./myapp.py    84         0         0             0      0           0              # LEFT OUTER JOIN
./myapp.py    85         0         0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    86         0         0             0      0           0              #   FROM votes
./myapp.py    87         0         0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    88         0         0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    89         0         0             0      0           0              # ORDER BY v.count DESC
./myapp.py    90         0         0             0      0           0              # """)
./myapp.py    91         0       1.0           0.5      2           1                  result = []
./myapp.py    92     1.097     1.194         1.145     62          71                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    93    22.967      23.2        23.083     60        1385                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    94       1.4     1.433         1.417     60          85                      result.append(data)
./myapp.py    95         0         0             0      0           0
./myapp.py    96     0.567      61.0         2.516     62         156                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py    97       1.0       1.0           1.0      2           2                  return result
./myapp.py   100         0         0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   101         0         0             0      0           0              #     cur = db().cursor()
./myapp.py   102         0         0             0      0           0              #     cur.execute("""
./myapp.py   103         0         0             0      0           0              # SELECT keyword
./myapp.py   104         0         0             0      0           0              # FROM votes
./myapp.py   105         0         0             0      0           0              # WHERE candidate_id = %s
./myapp.py   106         0         0             0      0           0              # GROUP BY keyword
./myapp.py   107         0         0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   108         0         0             0      0           0              # LIMIT 10
./myapp.py   109         0         0             0      0           0              # """, (candidate_id,))
./myapp.py   110         0         0             0      0           0              #     records = cur.fetchall()
./myapp.py   111         0         0             0      0           0
./myapp.py   112         0         0             0      0           0                  """
./myapp.py   113         0         0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   114         0         0             0      0           0                  """
./myapp.py   115    3195.0    3963.0        3579.0      2        7158                  keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   116   193.727    7798.0       825.458     24       19811                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   117         0         0             0      0           0                  # print(result)
./myapp.py   118         0         0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   119         0       1.0           0.5      2           1                  return result
./myapp.py   120         0         0             0      0           0
./myapp.py   121         0         0             0      0           0
./myapp.py   122         0         0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   123     0.857      13.0         2.375      8          19              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   124         0         0             0      0           0
./myapp.py   125         0         0             0      0           0                cur = db().cursor()
./myapp.py   126         0         0             0      0           0                cur.execute("""
./myapp.py   127         0         0             0      0           0              LECT keyword
./myapp.py   128         0         0             0      0           0              OM votes
./myapp.py   129         0         0             0      0           0              ERE candidate_id IN ({})
./myapp.py   130         0         0             0      0           0              OUP BY keyword
./myapp.py   131         0         0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   132         0         0             0      0           0              MIT 10
./myapp.py   133         0         0             0      0           0              ".format(candidate_ids_str))
./myapp.py   134         0         0             0      0           0                records = cur.fetchall()
./myapp.py   135         0         0             0      0           0
./myapp.py   136      32.0      32.0          32.0      1          32              total_keywords = Counter()
./myapp.py   137     0.571     0.571         0.571      7           4              for candidate_id in candidate_ids:
./myapp.py   138  1193.667  1193.667      1193.667      6        7162                  total_keywords += Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   139         0         0             0      0           0
./myapp.py   140      97.0    1117.0         182.0     12        2184              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   141         0         0             0      0           0
./myapp.py   142         0         0             0      0           0
./myapp.py   143         0         0             0      0           0              def get_all_party_name():
./myapp.py   144       3.0       3.0           3.0      1           3                  return list(constants.PARTY_MASTER.keys())
./myapp.py   147         0         0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   148     0.667       2.0           1.0      8           8                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   151         0         0             0      0           0              def db_initialize():
./myapp.py   152     124.0     124.0         124.0      1         124                  cur = db().cursor()
./myapp.py   153   18261.0   18261.0       18261.0      1       18261                  cur.execute('DELETE FROM votes')
./myapp.py   156         0         0             0      0           0              @app.route('/')
./myapp.py   157         0         0             0      0           0              def get_index():
./myapp.py   158       2.0       2.0           2.0      1           2                  candidates = []
./myapp.py   159     982.0     982.0         982.0      1         982                  election_results = get_election_results()
./myapp.py   160         0         0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   161       2.0       2.0           2.0      1           2                  candidates += election_results[:10]
./myapp.py   162       1.0       1.0           1.0      1           1                  candidates.append(election_results[-1])
./myapp.py   163         0         0             0      0           0
./myapp.py   164       6.0       6.0           6.0      1           6                  parties_name = get_all_party_name()
./myapp.py   165       1.0       1.0           1.0      1           1                  parties = {}
./myapp.py   166       0.8       0.8           0.8      5           4                  for name in parties_name:
./myapp.py   167      0.75      0.75          0.75      4           3                      parties[name] = 0
./myapp.py   168     0.677     0.677         0.677     31          21                  for r in election_results:
./myapp.py   169       0.9       0.9           0.9     30          27                      parties[r['political_party']] += r['count'] or 0
./myapp.py   170       0.5      12.0           2.8      5          14                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   171         0         0             0      0           0
./myapp.py   172       2.0       2.0           2.0      1           2                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   173     0.774     0.774         0.774     31          24                  for r in election_results:
./myapp.py   174     0.733     0.733         0.733     30          22                      if r['sex'] == '男':
./myapp.py   175     0.667     0.667         0.667     12           8                          sex_ratio['men'] += r['count'] or 0
./myapp.py   176     0.722     0.722         0.722     18          13                      elif r['sex'] == '女':
./myapp.py   177     0.944     0.944         0.944     18          17                          sex_ratio['women'] += r['count'] or 0
./myapp.py   178      19.0      19.0          19.0      1          19                  cached_html = get_index_page_cache()
./myapp.py   179       1.0       1.0           1.0      1           1                  if cached_html:
./myapp.py   180         0         0             0      0           0                      return cached_html
./myapp.py   181         0         0             0      0           0
./myapp.py   182       1.0       1.0           1.0      1           1                  html = render_template('index.html',
./myapp.py   183       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   184       1.0       1.0           1.0      1           1                                         parties=parties,
./myapp.py   185  138849.0  138849.0      138849.0      1      138849                                         sex_ratio=sex_ratio)
./myapp.py   186         0         0             0      0           0
./myapp.py   187      40.0      40.0          40.0      1          40                  set_index_page_cache(html)
./myapp.py   188         0         0             0      1           0                  return html
./myapp.py   190         0         0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   191         0         0             0      0           0              def get_candidate(candidate_id):
./myapp.py   192       6.0       6.0           6.0      2          12                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   193         0         0             0      2           0                  if not candidate:
./myapp.py   194         0         0             0      0           0                      return redirect('/')
./myapp.py   195         0         0             0      0           0                  # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   196      38.0      39.0          38.5      2          77                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   197    5499.0   11773.0        8636.0      2       17272                  keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   198       1.0       1.0           1.0      2           2                  return render_template('candidate.html',
./myapp.py   199       1.0       1.0           1.0      2           2                                         candidate=candidate,
./myapp.py   200         0       1.0           0.5      2           1                                         votes=votes,
./myapp.py   201     733.0   31707.0       16220.0      2       32440                                         keywords=keywords)
./myapp.py   204         0         0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   205         0         0             0      0           0              def get_political_party(name):
./myapp.py   206       2.0       2.0           2.0      1           2                  votes = 0
./myapp.py   207    32.548    32.548        32.548     31        1009                  for r in get_election_results():
./myapp.py   208     0.633     0.633         0.633     30          19                      if r['political_party'] == name:
./myapp.py   209     0.667     0.667         0.667      6           4                          votes += r['count'] or 0
./myapp.py   210         0         0             0      0           0
./myapp.py   211         0         0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   212         0         0             0      0           0
./myapp.py   213       2.0       2.0           2.0      1           2                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   214     2.429      25.0          5.25      8          42                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   215    8361.0    8361.0        8361.0      1        8361                  keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   216         0         0             0      1           0                  return render_template('political_party.html',
./myapp.py   217         0         0             0      1           0                                         political_party=name,
./myapp.py   218         0         0             0      1           0                                         votes=votes,
./myapp.py   219       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   220   28965.0   28965.0       28965.0      1       28965                                         keywords=keywords)
./myapp.py   221         0         0             0      0           0
./myapp.py   222         0         0             0      0           0
./myapp.py   223         0         0             0      0           0              .route('/vote')
./myapp.py   224         0         0             0      0           0              get_vote():
./myapp.py   225         0         0             0      0           0              return constants.VOTE_HTML
./myapp.py   228         0         0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   229         0         0             0      0           0              def post_vote():
./myapp.py   230     101.0  267499.0        162.01   5527      895428  *               cur = db().cursor()
./myapp.py   231     101.0    1360.0       125.874   5527      695706  *               raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   232         0         0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   233       1.0     147.0         3.684  44216      162888                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   234       1.0      20.0         1.263   5527        6983                  data = (form_base['mynumber'], form_base['name'], form_base['address'])
./myapp.py   235     471.0  308279.0      1676.706   5527     9267155  !*********      cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', data)
./myapp.py   236      10.0     139.0        14.146   5527       78183                  user = cur.fetchone()
./myapp.py   237       5.0      60.0         5.773   5527       31909                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   238         0      18.0         0.827   5527        4573                  voted_count = 0
./myapp.py   239         0      20.0          0.84   5527        4642                  if user:
./myapp.py   240      20.0    2060.0        36.191   4450      161048                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   241         0         0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   242         0         0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   243         0         0             0      0           0                      # if not voted_count:
./myapp.py   244         0         0             0      0           0                      #     voted_count = 0
./myapp.py   245         0      56.0         0.945   5527        5224                  if not user:
./myapp.py   246         0      20.0         1.077   1077        1160                      return constants.VOTE_FAIL1_HTML
./myapp.py   247       1.0      24.0         2.991   4450       13310                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   248       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL2_HTML
./myapp.py   249         0      21.0         0.962   4449        4282                  elif not form_base['candidate']:
./myapp.py   250       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL3_HTML
./myapp.py   251         0      19.0          0.82   4448        3646                  elif not candidate_id:
./myapp.py   252       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL4_HTML
./myapp.py   253         0      24.0         0.918   4447        4084                  elif not form_base['keyword']:
./myapp.py   254       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL5_HTML
./myapp.py   255         0         0             0      0           0
./myapp.py   256       1.0      25.0         1.193   4446        5304                  vote_count = int(form_base['vote_count'])
./myapp.py   257         0         0             0      0           0                  #data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   258         0         0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   259      31.0    4098.0        93.194   4446      414339                  set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   260     309.0    5010.0       887.031   4446     3943740  ****            set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   261      29.0    3718.0       279.546   4446     1242861  *               set_voted_count_cache(user['id'], vote_count)
./myapp.py   262         0         0             0      0           0
./myapp.py   263      10.0    4699.0       286.498   4446     1273771  *               clear_index_page_cache()
./myapp.py   264       1.0      22.0         1.778   4446        7904                  return constants.VOTE_SUCCESS_HTML
./myapp.py   265         0         0             0      0           0
./myapp.py   266         0         0             0      0           0
./myapp.py   267         0         0             0      0           0              @app.route('/initialize')
./myapp.py   268         0         0             0      0           0              def get_initialize():
./myapp.py   269   18393.0   18393.0       18393.0      1       18393                  db_initialize()
./myapp.py   270   27897.0   27897.0       27897.0      1       27897                  r.flushdb()
./myapp.py   271       1.0       1.0           1.0      1           1                  return ''
./myapp.py   274         0         0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   275       1.0      30.0         1.952   5527       10789                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   278         0         0             0      0           0              def set_cache(key, val):
./myapp.py   279       1.0   766.333         7.902  13339      105406                  if not uwsgi.cache_exists(key):
./myapp.py   280       4.0    3667.0       229.005   4474     1024569  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   281         0         0             0      0           0                  else:
./myapp.py   282       2.0    2512.5       155.198   8865     1375828  *                   uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   285         0         0             0      0           0              def get_cache(key, default=None):
./myapp.py   286         0     6.667         0.606  13405        8124                  try:
./myapp.py   287       5.0     690.0         15.34  13405      205631                      return pickle.loads(uwsgi.cache_get(key))
./myapp.py   288         0      10.0         1.046   8924        9332                  except:
./myapp.py   289         0      10.5         1.279   8924       11416                      return default
./myapp.py   292         0         0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   293       2.0      23.0         2.719   4446       12087                  key_name = 'voted_{}'.format(user_id)
./myapp.py   294      21.0    3709.0       270.252   4446     1201540  *               set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   297         0         0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   298       2.0      37.0         2.807   4450       12489                  key_name = 'voted_{}'.format(user_id)
./myapp.py   299      14.0    2054.0        28.427   4450      126499                  return get_cache(key_name, 0)
./myapp.py   302         0         0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   303         0      17.0         0.897   4446        3989                  key_name = md5('cv_{}'.format(
./myapp.py   304       1.0      29.0         1.956   4446        8697                      candidate_id,
./myapp.py   305       4.0      43.0         5.415   4446       24074                  ).encode('utf-8')).hexdigest()
./myapp.py   306      17.0    4082.0        76.921   4446      341990                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   309         0         0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   310     0.633       1.0          0.71     62          44                  key_name = md5('cv_{}'.format(
./myapp.py   311     1.433       5.0         1.516     62          94                      candidate_id,
./myapp.py   312     2.367      10.0         2.677     62         166                  ).encode('utf-8')).hexdigest()
./myapp.py   313    12.867      17.0        13.097     62         812                  return get_cache(key_name, 0)
./myapp.py   316         0         0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   317         0      48.0         0.926   4446        4115                  key_name = 'ckv_{}_{}'.format(
./myapp.py   318       1.0      26.0         2.506   4446       11143                      candidate_id, keyword
./myapp.py   319         0         0             0      0           0                  )
./myapp.py   320     301.0    5000.0        874.24   4446     3886869  ****            r.incr(key_name, vote_count)
./myapp.py   323         0         0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   324       2.0     2.667           2.5      8          20                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   325     0.833       1.0         0.875      8           7                  result = {}
./myapp.py   326    29.733    69.391        47.686     51        2432                  for key in r.keys(key_name):
./myapp.py   327     3.059     3.167         3.116     43         134                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   328   221.417   284.941        247.14     43       10627                      result[keyword] = int(r.get(key))
./myapp.py   329         0         0             0      0           0
./myapp.py   330         0       1.0           0.5      8           4                  return result
./myapp.py   332         0         0             0      0           0              def set_index_page_cache(html):
./myapp.py   333      36.0      36.0          36.0      1          36                  set_cache('index', html)
./myapp.py   336         0         0             0      0           0              def get_index_page_cache():
./myapp.py   337      15.0      15.0          15.0      1          15                  return get_cache('index', None)
./myapp.py   339         0         0             0      0           0              def clear_index_page_cache():
./myapp.py   340       6.0    4692.0       281.135   4446     1249928  *               set_cache('index', None)
./myapp.py   375         0         0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   376         0         0             0      0           0              def unquote_cached(keyword):
./myapp.py   377     262.0     754.9       594.778     18       10706                  return unquote_plus(keyword)
