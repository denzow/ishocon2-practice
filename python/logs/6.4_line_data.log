 file_name  line  min_time  max_time  avg_per_time   hits  total_time       graph                                                                                                              code
----------  ----  --------  --------  ------------  -----  ----------  ----------  ----------------------------------------------------------------------------------------------------------------
./myapp.py    64         0         0             0      0           0              def db():
./myapp.py    65      25.0     147.0        28.233   5262      148562                  if hasattr(request, 'db'):
./myapp.py    66         0         0             0      0           0                      return request.db
./myapp.py    67         0         0             0      0           0                  else:
./myapp.py    68      21.0     138.0        24.337   5262      128063                      request.db = DB_POOL.pop()
./myapp.py    69      20.0     113.0        22.592   5262      118881                      return request.db
./myapp.py    72         0         0             0      0           0              @app.teardown_request
./myapp.py    73         0         0             0      0           0              def teardown(exception=None):
./myapp.py    74      24.0      84.0        26.358   5266      138803                  if hasattr(request, 'db'):
./myapp.py    75      21.0      95.0        22.565   5262      118737                      DB_POOL.append(request.db)
./myapp.py    76      20.0      81.0        21.842   5262      114934                      delattr(request, 'db')
./myapp.py    79         0         0             0      0           0              def get_election_results():
./myapp.py    80         0         0             0      0           0              #     cur = db().cursor()
./myapp.py    81         0         0             0      0           0              #     cur.execute("""
./myapp.py    82         0         0             0      0           0              # SELECT c.id, c.name, c.political_party, c.sex, v.count
./myapp.py    83         0         0             0      0           0              # FROM candidates AS c
./myapp.py    84         0         0             0      0           0              # LEFT OUTER JOIN
./myapp.py    85         0         0             0      0           0              #   (SELECT candidate_id, sum(vote_count) AS count
./myapp.py    86         0         0             0      0           0              #   FROM votes
./myapp.py    87         0         0             0      0           0              #   GROUP BY candidate_id) AS v
./myapp.py    88         0         0             0      0           0              # ON c.id = v.candidate_id
./myapp.py    89         0         0             0      0           0              # ORDER BY v.count DESC
./myapp.py    90         0         0             0      0           0              # """)
./myapp.py    91         0       1.0           0.5      2           1                  result = []
./myapp.py    92     1.032     1.097         1.065     62          66                  for candidate_id, data in constants.CANDIDATES_MASTER.items():
./myapp.py    93      23.7      24.4         24.05     60        1443                      data['count'] = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py    94     1.567     1.567         1.567     60          94                      result.append(data)
./myapp.py    95         0         0             0      0           0
./myapp.py    96     0.567      63.0         2.532     62         157                  result.sort(key=lambda x: x['count'], reverse=True)
./myapp.py    97         0         0             0      2           0                  return result
./myapp.py   100         0         0             0      0           0              def get_voice_of_supporter_by_id(candidate_id):
./myapp.py   101         0         0             0      0           0              #     cur = db().cursor()
./myapp.py   102         0         0             0      0           0              #     cur.execute("""
./myapp.py   103         0         0             0      0           0              # SELECT keyword
./myapp.py   104         0         0             0      0           0              # FROM votes
./myapp.py   105         0         0             0      0           0              # WHERE candidate_id = %s
./myapp.py   106         0         0             0      0           0              # GROUP BY keyword
./myapp.py   107         0         0             0      0           0              # ORDER BY sum(vote_count) DESC
./myapp.py   108         0         0             0      0           0              # LIMIT 10
./myapp.py   109         0         0             0      0           0              # """, (candidate_id,))
./myapp.py   110         0         0             0      0           0              #     records = cur.fetchall()
./myapp.py   111         0         0             0      0           0
./myapp.py   112         0         0             0      0           0                  """
./myapp.py   113         0         0             0      0           0                  {keyword1: 100, keyword2: 200}
./myapp.py   114         0         0             0      0           0                  """
./myapp.py   115    2644.0    3251.0        2947.5      2        5895                  keyword_cache = Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   116   178.182    7895.0       816.583     24       19598                  result = [unquote_cached(r[0]) for r in keyword_cache.most_common(10)]
./myapp.py   117         0         0             0      0           0                  # print(result)
./myapp.py   118         0         0             0      0           0                  # print([(unquote_cached(r[0]), r[1]) for r in keyword_cache.most_common(10)], keyword_cache.values())
./myapp.py   119       1.0       1.0           1.0      2           2                  return result
./myapp.py   120         0         0             0      0           0
./myapp.py   121         0         0             0      0           0
./myapp.py   122         0         0             0      0           0              get_voice_of_supporter(candidate_ids):
./myapp.py   123     0.857      13.0         2.375      8          19              candidate_ids_str = ','.join([str(cid) for cid in candidate_ids])
./myapp.py   124         0         0             0      0           0
./myapp.py   125         0         0             0      0           0                cur = db().cursor()
./myapp.py   126         0         0             0      0           0                cur.execute("""
./myapp.py   127         0         0             0      0           0              LECT keyword
./myapp.py   128         0         0             0      0           0              OM votes
./myapp.py   129         0         0             0      0           0              ERE candidate_id IN ({})
./myapp.py   130         0         0             0      0           0              OUP BY keyword
./myapp.py   131         0         0             0      0           0              DER BY sum(vote_count) DESC
./myapp.py   132         0         0             0      0           0              MIT 10
./myapp.py   133         0         0             0      0           0              ".format(candidate_ids_str))
./myapp.py   134         0         0             0      0           0                records = cur.fetchall()
./myapp.py   135         0         0             0      0           0
./myapp.py   136      29.0      29.0          29.0      1          29              total_keywords = Counter()
./myapp.py   137     0.857     0.857         0.857      7           6              for candidate_id in candidate_ids:
./myapp.py   138  1036.333  1036.333      1036.333      6        6218                  total_keywords += Counter(get_vote_keyword_count_cache_by_candidate_id(candidate_id))
./myapp.py   139         0         0             0      0           0
./myapp.py   140       1.0      53.0         5.727     11          63              return [unquote_cached(r[0]) for r in total_keywords.most_common(10)]
./myapp.py   141         0         0             0      0           0
./myapp.py   142         0         0             0      0           0
./myapp.py   143         0         0             0      0           0              def get_all_party_name():
./myapp.py   144       3.0       3.0           3.0      1           3                  return list(constants.PARTY_MASTER.keys())
./myapp.py   147         0         0             0      0           0              def get_candidate_by_id(candidate_id):
./myapp.py   148     0.333       2.0          0.75      8           6                  return constants.CANDIDATES_MASTER.get(candidate_id, None)
./myapp.py   151         0         0             0      0           0              def db_initialize():
./myapp.py   152     125.0     125.0         125.0      1         125                  cur = db().cursor()
./myapp.py   153     404.0     404.0         404.0      1         404                  cur.execute('DELETE FROM votes')
./myapp.py   156         0         0             0      0           0              @app.route('/')
./myapp.py   157         0         0             0      0           0              def get_index():
./myapp.py   158       2.0       2.0           2.0      1           2                  candidates = []
./myapp.py   159    1018.0    1018.0        1018.0      1        1018                  election_results = get_election_results()
./myapp.py   160         0         0             0      0           0                  # 上位10人と最下位のみ表示
./myapp.py   161       2.0       2.0           2.0      1           2                  candidates += election_results[:10]
./myapp.py   162       1.0       1.0           1.0      1           1                  candidates.append(election_results[-1])
./myapp.py   163         0         0             0      0           0
./myapp.py   164       6.0       6.0           6.0      1           6                  parties_name = get_all_party_name()
./myapp.py   165       1.0       1.0           1.0      1           1                  parties = {}
./myapp.py   166       0.6       0.6           0.6      5           3                  for name in parties_name:
./myapp.py   167      0.75      0.75          0.75      4           3                      parties[name] = 0
./myapp.py   168     0.742     0.742         0.742     31          23                  for r in election_results:
./myapp.py   169     0.933     0.933         0.933     30          28                      parties[r['political_party']] += r['count'] or 0
./myapp.py   170      0.75      13.0           3.2      5          16                  parties = sorted(parties.items(), key=lambda x: x[1], reverse=True)
./myapp.py   171         0         0             0      0           0
./myapp.py   172       6.0       6.0           6.0      1           6                  sex_ratio = {'men': 0, 'women': 0}
./myapp.py   173     0.903     0.903         0.903     31          28                  for r in election_results:
./myapp.py   174     0.867     0.867         0.867     30          26                      if r['sex'] == '男':
./myapp.py   175     0.583     0.583         0.583     12           7                          sex_ratio['men'] += r['count'] or 0
./myapp.py   176     0.611     0.611         0.611     18          11                      elif r['sex'] == '女':
./myapp.py   177     0.778     0.778         0.778     18          14                          sex_ratio['women'] += r['count'] or 0
./myapp.py   178      21.0      21.0          21.0      1          21                  cached_html = get_index_page_cache()
./myapp.py   179       2.0       2.0           2.0      1           2                  if cached_html:
./myapp.py   180         0         0             0      0           0                      return cached_html
./myapp.py   181         0         0             0      0           0
./myapp.py   182       2.0       2.0           2.0      1           2                  html = render_template('index.html',
./myapp.py   183       1.0       1.0           1.0      1           1                                         candidates=candidates,
./myapp.py   184         0         0             0      1           0                                         parties=parties,
./myapp.py   185  154141.0  154141.0      154141.0      1      154141                                         sex_ratio=sex_ratio)
./myapp.py   186         0         0             0      0           0
./myapp.py   187      42.0      42.0          42.0      1          42                  set_index_page_cache(html)
./myapp.py   188       1.0       1.0           1.0      1           1                  return html
./myapp.py   190         0         0             0      0           0              @app.route('/candidates/<int:candidate_id>')
./myapp.py   191         0         0             0      0           0              def get_candidate(candidate_id):
./myapp.py   192       6.0       7.0           6.5      2          13                  candidate = get_candidate_by_id(candidate_id)
./myapp.py   193         0         0             0      2           0                  if not candidate:
./myapp.py   194         0         0             0      0           0                      return redirect('/')
./myapp.py   195         0         0             0      0           0                  # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE candidate_id = {}'.format(candidate_id))
./myapp.py   196      32.0      38.0          35.0      2          70                  votes = get_vote_count_cache_by_candidate_id(candidate_id)
./myapp.py   197    4658.0   11157.0        7907.5      2       15815                  keywords = get_voice_of_supporter_by_id(candidate_id)
./myapp.py   198         0       1.0           0.5      2           1                  return render_template('candidate.html',
./myapp.py   199       1.0       1.0           1.0      2           2                                         candidate=candidate,
./myapp.py   200       1.0       1.0           1.0      2           2                                         votes=votes,
./myapp.py   201     591.0   25777.0       13184.0      2       26368                                         keywords=keywords)
./myapp.py   204         0         0             0      0           0              @app.route('/political_parties/<string:name>')
./myapp.py   205         0         0             0      0           0              def get_political_party(name):
./myapp.py   206       1.0       1.0           1.0      1           1                  votes = 0
./myapp.py   207    32.581    32.581        32.581     31        1010                  for r in get_election_results():
./myapp.py   208     0.667     0.667         0.667     30          20                      if r['political_party'] == name:
./myapp.py   209     0.667     0.667         0.667      6           4                          votes += r['count'] or 0
./myapp.py   210         0         0             0      0           0
./myapp.py   211         0         0             0      0           0              #    cur.execute('SELECT * FROM candidates WHERE political_party = "{}"'.format(name))
./myapp.py   212         0         0             0      0           0
./myapp.py   213       2.0       2.0           2.0      1           2                  candidate_ids = constants.PARTY_MASTER.get(name)
./myapp.py   214     2.143      23.0          4.75      8          38                  candidates = [get_candidate_by_id(candidate_id) for candidate_id in candidate_ids]
./myapp.py   215    6350.0    6350.0        6350.0      1        6350                  keywords = get_voice_of_supporter(candidate_ids)
./myapp.py   216       1.0       1.0           1.0      1           1                  return render_template('political_party.html',
./myapp.py   217       1.0       1.0           1.0      1           1                                         political_party=name,
./myapp.py   218       1.0       1.0           1.0      1           1                                         votes=votes,
./myapp.py   219         0         0             0      1           0                                         candidates=candidates,
./myapp.py   220   28248.0   28248.0       28248.0      1       28248                                         keywords=keywords)
./myapp.py   221         0         0             0      0           0
./myapp.py   222         0         0             0      0           0
./myapp.py   223         0         0             0      0           0              .route('/vote')
./myapp.py   224         0         0             0      0           0              get_vote():
./myapp.py   225         0         0             0      0           0              return constants.VOTE_HTML
./myapp.py   228         0         0             0      0           0              @app.route('/vote', methods=['POST'])
./myapp.py   229         0         0             0      0           0              def post_vote():
./myapp.py   230     102.0    1039.0       115.487   5262      607694  *               cur = db().cursor()
./myapp.py   231      99.0   46371.0       134.423   5262      707336  *               raw_params = request._get_stream_for_parsing().read().decode('utf-8').split('&')
./myapp.py   232         0         0             0      0           0                  #form_base = {x.split('=')[0]: unquote_plus(x.split('=')[1]) for x in raw_params}
./myapp.py   233       1.0      96.0         3.669  42089      154416                  form_base = {x.split('=')[0]: x.split('=')[1] for x in raw_params}
./myapp.py   234         0      19.0         1.083   5262        5699                  cur.execute('SELECT id, votes FROM users WHERE mynumber = %s AND name = %s AND address = %s', (
./myapp.py   235     439.0   60220.0      1831.187   5262     9635704  !*********          form_base['mynumber'], form_base['name'], form_base['address']
./myapp.py   236         0         0             0      0           0                  ))
./myapp.py   237      10.0      99.0        13.724   5261       72204                  user = cur.fetchone()
./myapp.py   238       4.0      39.0         5.492   5261       28894                  candidate_id = get_candidate_id_by_name(form_base['candidate'])
./myapp.py   239         0      15.0         0.807   5261        4243                  voted_count = 0
./myapp.py   240         0      20.0         0.812   5261        4274                  if user:
./myapp.py   241      19.0    1215.0        35.517   4238      150521                      voted_count = get_voted_count_cache(user['id'])
./myapp.py   242         0         0             0      0           0                      # cur.execute('SELECT sum(vote_count) AS count FROM votes WHERE user_id = %s', (user['id'],))
./myapp.py   243         0         0             0      0           0                      # voted_count = cur.fetchone()['count']
./myapp.py   244         0         0             0      0           0                      # if not voted_count:
./myapp.py   245         0         0             0      0           0                      #     voted_count = 0
./myapp.py   246         0      39.0         0.897   5261        4718                  if not user:
./myapp.py   247         0      19.0         1.028   1023        1052                      return constants.VOTE_FAIL1_HTML
./myapp.py   248       2.0      52.0         2.728   4238       11560                  elif user['votes'] < (int(form_base['vote_count']) + voted_count):
./myapp.py   249       1.0       2.0         1.667      3           5                      return constants.VOTE_FAIL2_HTML
./myapp.py   250         0      20.0         0.904   4235        3830                  elif not form_base['candidate']:
./myapp.py   251       1.0       1.0           1.0      1           1                      return constants.VOTE_FAIL3_HTML
./myapp.py   252         0      20.0         0.773   4234        3274                  elif not candidate_id:
./myapp.py   253       2.0       2.0           2.0      1           2                      return constants.VOTE_FAIL4_HTML
./myapp.py   254         0      16.0         0.874   4233        3698                  elif not form_base['keyword']:
./myapp.py   255       2.0       2.0           2.0      1           2                      return constants.VOTE_FAIL5_HTML
./myapp.py   256         0         0             0      0           0
./myapp.py   257       1.0      19.0         1.173   4232        4965                  vote_count = int(form_base['vote_count'])
./myapp.py   258         0         0             0      0           0                  #data = (user['id'], candidate_id, form_base['keyword'], vote_count)
./myapp.py   259         0         0             0      0           0                  #cur.execute('INSERT INTO votes (user_id, candidate_id, keyword, vote_count) VALUES (%s, %s, %s, %s)', data)
./myapp.py   260      29.0    3708.0         79.71   4232      337332                  set_vote_count_cache_by_candidate_id(candidate_id, vote_count)
./myapp.py   261     304.0  302970.0         965.5   4232     4085996  ****            set_vote_keyword_count_cache_by_candidate_id(candidate_id, form_base['keyword'],  vote_count)
./myapp.py   262      28.0  386097.0       450.276   4232     1905568  **              set_voted_count_cache(user['id'], vote_count)
./myapp.py   263         0         0             0      0           0
./myapp.py   264       9.0    4867.0       296.178   4232     1253424  *               clear_index_page_cache()
./myapp.py   265       1.0      21.0         1.809   4232        7656                  return constants.VOTE_SUCCESS_HTML
./myapp.py   266         0         0             0      0           0
./myapp.py   267         0         0             0      0           0
./myapp.py   268         0         0             0      0           0              @app.route('/initialize')
./myapp.py   269         0         0             0      0           0              def get_initialize():
./myapp.py   270     535.0     535.0         535.0      1         535                  db_initialize()
./myapp.py   271   16636.0   16636.0       16636.0      1       16636                  r.flushdb()
./myapp.py   272         0         0             0      1           0                  return ''
./myapp.py   275         0         0             0      0           0              def get_candidate_id_by_name(name):
./myapp.py   276       1.0      27.0         1.841   5261        9687                  return constants.QUOTED_CANDIDATES.get(name, None)
./myapp.py   279         0         0             0      0           0              def set_cache(key, val):
./myapp.py   280       1.0   260.333         7.535  12697       95677                  if not uwsgi.cache_exists(key):
./myapp.py   281       4.0    4251.0       236.033   4259     1005265  *                   uwsgi.cache_set(key, pickle.dumps(val))
./myapp.py   282         0         0             0      0           0                  else:
./myapp.py   283       2.0    2429.0       154.212   8438     1301238  *                   uwsgi.cache_update(key, pickle.dumps(val))
./myapp.py   286         0         0             0      0           0              def get_cache(key, default=None):
./myapp.py   287         0       8.0         0.595  12765        7596                  try:
./myapp.py   288       5.0  128690.0        45.196  12765      576933  *                   return pickle.loads(uwsgi.cache_get(key))
./myapp.py   289         0      11.0         1.039   8498        8827                  except:
./myapp.py   290     0.333      11.5         1.235   8498       10491                      return default
./myapp.py   293         0         0             0      0           0              def set_voted_count_cache(user_id, voted_count):
./myapp.py   294       2.0      22.0         2.652   4232       11225                  key_name = 'voted_{}'.format(user_id)
./myapp.py   295      21.0  386086.0       368.738   4232     1560498  **              set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   298         0         0             0      0           0              def get_voted_count_cache(user_id):
./myapp.py   299       2.0      26.0         2.686   4238       11385                  key_name = 'voted_{}'.format(user_id)
./myapp.py   300      13.0    1208.0        27.795   4238      117797                  return get_cache(key_name, 0)
./myapp.py   303         0         0             0      0           0              def set_vote_count_cache_by_candidate_id(candidate_id, voted_count):
./myapp.py   304         0      61.0         0.902   4232        3817                  key_name = md5('cv_{}'.format(
./myapp.py   305       1.0      20.0         1.852   4232        7837                      candidate_id,
./myapp.py   306       4.0      33.0         5.555   4232       23507                  ).encode('utf-8')).hexdigest()
./myapp.py   307      16.0    3693.0        63.645   4232      269344                  set_cache(key_name, get_cache(key_name, 0) + voted_count)
./myapp.py   310         0         0             0      0           0              def get_vote_count_cache_by_candidate_id(candidate_id):
./myapp.py   311     0.633       1.0         0.661     62          41                  key_name = md5('cv_{}'.format(
./myapp.py   312       1.3       4.0         1.452     62          90                      candidate_id,
./myapp.py   313     2.333       8.0         2.613     62         162                  ).encode('utf-8')).hexdigest()
./myapp.py   314    13.633      17.0        13.903     62         862                  return get_cache(key_name, 0)
./myapp.py   317         0         0             0      0           0              def set_vote_keyword_count_cache_by_candidate_id(candidate_id, keyword, vote_count):
./myapp.py   318         0      22.0         0.904   4232        3827                  key_name = 'ckv_{}_{}'.format(
./myapp.py   319       1.0      44.0         2.433   4232       10298                      candidate_id, keyword
./myapp.py   320         0         0             0      0           0                  )
./myapp.py   321     296.0  302958.0       953.805   4232     4036503  ****            r.incr(key_name, vote_count)
./myapp.py   324         0         0             0      0           0              def get_vote_keyword_count_cache_by_candidate_id(candidate_id):
./myapp.py   325       2.0       2.0           2.0      8          16                  key_name = 'ckv_{}_*'.format(candidate_id)
./myapp.py   326     0.667       1.0          0.75      8           6                  result = {}
./myapp.py   327    29.455    121.95        73.628     43        3166                  for key in r.keys(key_name):
./myapp.py   328     2.909     3.071           3.0     35         105                      keyword = key.decode('utf-8').split('_')[2]
./myapp.py   329     218.0   225.091       221.771     35        7762                      result[keyword] = int(r.get(key))
./myapp.py   330         0         0             0      0           0
./myapp.py   331         0     0.333          0.25      8           2                  return result
./myapp.py   333         0         0             0      0           0              def set_index_page_cache(html):
./myapp.py   334      38.0      38.0          38.0      1          38                  set_cache('index', html)
./myapp.py   337         0         0             0      0           0              def get_index_page_cache():
./myapp.py   338      16.0      16.0          16.0      1          16                  return get_cache('index', None)
./myapp.py   340         0         0             0      0           0              def clear_index_page_cache():
./myapp.py   341       6.0    4861.0        290.61   4232     1229863  *               set_cache('index', None)
./myapp.py   376         0         0             0      0           0              @lru_cache(maxsize=100)
./myapp.py   377         0         0             0      0           0              def unquote_cached(keyword):
./myapp.py   378    484.75     770.8       689.071     14        9647                  return unquote_plus(keyword)
